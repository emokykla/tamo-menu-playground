(()=>{var e={599:(e,t,r)=>{"use strict";r.d(t,{Mx:()=>V,Qr:()=>q});class s{constructor(e,t,r){this.eventTarget=e,this.eventName=t,this.eventOptions=r,this.unorderedBindings=new Set}connect(){this.eventTarget.addEventListener(this.eventName,this,this.eventOptions)}disconnect(){this.eventTarget.removeEventListener(this.eventName,this,this.eventOptions)}bindingConnected(e){this.unorderedBindings.add(e)}bindingDisconnected(e){this.unorderedBindings.delete(e)}handleEvent(e){const t=function(e){if("immediatePropagationStopped"in e)return e;{const{stopImmediatePropagation:t}=e;return Object.assign(e,{immediatePropagationStopped:!1,stopImmediatePropagation(){this.immediatePropagationStopped=!0,t.call(this)}})}}(e);for(const e of this.bindings){if(t.immediatePropagationStopped)break;e.handleEvent(t)}}get bindings(){return Array.from(this.unorderedBindings).sort(((e,t)=>{const r=e.index,s=t.index;return r<s?-1:r>s?1:0}))}}class n{constructor(e){this.application=e,this.eventListenerMaps=new Map,this.started=!1}start(){this.started||(this.started=!0,this.eventListeners.forEach((e=>e.connect())))}stop(){this.started&&(this.started=!1,this.eventListeners.forEach((e=>e.disconnect())))}get eventListeners(){return Array.from(this.eventListenerMaps.values()).reduce(((e,t)=>e.concat(Array.from(t.values()))),[])}bindingConnected(e){this.fetchEventListenerForBinding(e).bindingConnected(e)}bindingDisconnected(e){this.fetchEventListenerForBinding(e).bindingDisconnected(e)}handleError(e,t,r={}){this.application.handleError(e,`Error ${t}`,r)}fetchEventListenerForBinding(e){const{eventTarget:t,eventName:r,eventOptions:s}=e;return this.fetchEventListener(t,r,s)}fetchEventListener(e,t,r){const s=this.fetchEventListenerMapForEventTarget(e),n=this.cacheKey(t,r);let i=s.get(n);return i||(i=this.createEventListener(e,t,r),s.set(n,i)),i}createEventListener(e,t,r){const n=new s(e,t,r);return this.started&&n.connect(),n}fetchEventListenerMapForEventTarget(e){let t=this.eventListenerMaps.get(e);return t||(t=new Map,this.eventListenerMaps.set(e,t)),t}cacheKey(e,t){const r=[e];return Object.keys(t).sort().forEach((e=>{r.push(`${t[e]?"":"!"}${e}`)})),r.join(":")}}const i=/^((.+?)(@(window|document))?->)?(.+?)(#([^:]+?))(:(.+))?$/;function o(e){return e.replace(/(?:[_-])([a-z0-9])/g,((e,t)=>t.toUpperCase()))}function a(e){return e.charAt(0).toUpperCase()+e.slice(1)}function c(e){return e.replace(/([A-Z])/g,((e,t)=>`-${t.toLowerCase()}`))}const h={a:e=>"click",button:e=>"click",form:e=>"submit",details:e=>"toggle",input:e=>"submit"==e.getAttribute("type")?"click":"input",select:e=>"change",textarea:e=>"input"};function l(e){throw new Error(e)}function u(e){try{return JSON.parse(e)}catch(t){return e}}class d{constructor(e,t){this.context=e,this.action=t}get index(){return this.action.index}get eventTarget(){return this.action.eventTarget}get eventOptions(){return this.action.eventOptions}get identifier(){return this.context.identifier}handleEvent(e){this.willBeInvokedByEvent(e)&&this.invokeWithEvent(e)}get eventName(){return this.action.eventName}get method(){const e=this.controller[this.methodName];if("function"==typeof e)return e;throw new Error(`Action "${this.action}" references undefined method "${this.methodName}"`)}invokeWithEvent(e){const{target:t,currentTarget:r}=e;try{const{params:s}=this.action,n=Object.assign(e,{params:s});this.method.call(this.controller,n),this.context.logDebugActivity(this.methodName,{event:e,target:t,currentTarget:r,action:this.methodName})}catch(t){const{identifier:r,controller:s,element:n,index:i}=this,o={identifier:r,controller:s,element:n,index:i,event:e};this.context.handleError(t,`invoking action "${this.action}"`,o)}}willBeInvokedByEvent(e){const t=e.target;return this.element===t||(t instanceof Element&&this.element.contains(t)?this.scope.containsElement(t):this.scope.containsElement(this.action.element))}get controller(){return this.context.controller}get methodName(){return this.action.methodName}get element(){return this.scope.element}get scope(){return this.context.scope}}class g{constructor(e,t){this.mutationObserverInit={attributes:!0,childList:!0,subtree:!0},this.element=e,this.started=!1,this.delegate=t,this.elements=new Set,this.mutationObserver=new MutationObserver((e=>this.processMutations(e)))}start(){this.started||(this.started=!0,this.mutationObserver.observe(this.element,this.mutationObserverInit),this.refresh())}pause(e){this.started&&(this.mutationObserver.disconnect(),this.started=!1),e(),this.started||(this.mutationObserver.observe(this.element,this.mutationObserverInit),this.started=!0)}stop(){this.started&&(this.mutationObserver.takeRecords(),this.mutationObserver.disconnect(),this.started=!1)}refresh(){if(this.started){const e=new Set(this.matchElementsInTree());for(const t of Array.from(this.elements))e.has(t)||this.removeElement(t);for(const t of Array.from(e))this.addElement(t)}}processMutations(e){if(this.started)for(const t of e)this.processMutation(t)}processMutation(e){"attributes"==e.type?this.processAttributeChange(e.target,e.attributeName):"childList"==e.type&&(this.processRemovedNodes(e.removedNodes),this.processAddedNodes(e.addedNodes))}processAttributeChange(e,t){const r=e;this.elements.has(r)?this.delegate.elementAttributeChanged&&this.matchElement(r)?this.delegate.elementAttributeChanged(r,t):this.removeElement(r):this.matchElement(r)&&this.addElement(r)}processRemovedNodes(e){for(const t of Array.from(e)){const e=this.elementFromNode(t);e&&this.processTree(e,this.removeElement)}}processAddedNodes(e){for(const t of Array.from(e)){const e=this.elementFromNode(t);e&&this.elementIsActive(e)&&this.processTree(e,this.addElement)}}matchElement(e){return this.delegate.matchElement(e)}matchElementsInTree(e=this.element){return this.delegate.matchElementsInTree(e)}processTree(e,t){for(const r of this.matchElementsInTree(e))t.call(this,r)}elementFromNode(e){if(e.nodeType==Node.ELEMENT_NODE)return e}elementIsActive(e){return e.isConnected==this.element.isConnected&&this.element.contains(e)}addElement(e){this.elements.has(e)||this.elementIsActive(e)&&(this.elements.add(e),this.delegate.elementMatched&&this.delegate.elementMatched(e))}removeElement(e){this.elements.has(e)&&(this.elements.delete(e),this.delegate.elementUnmatched&&this.delegate.elementUnmatched(e))}}class m{constructor(e,t,r){this.attributeName=t,this.delegate=r,this.elementObserver=new g(e,this)}get element(){return this.elementObserver.element}get selector(){return`[${this.attributeName}]`}start(){this.elementObserver.start()}pause(e){this.elementObserver.pause(e)}stop(){this.elementObserver.stop()}refresh(){this.elementObserver.refresh()}get started(){return this.elementObserver.started}matchElement(e){return e.hasAttribute(this.attributeName)}matchElementsInTree(e){const t=this.matchElement(e)?[e]:[],r=Array.from(e.querySelectorAll(this.selector));return t.concat(r)}elementMatched(e){this.delegate.elementMatchedAttribute&&this.delegate.elementMatchedAttribute(e,this.attributeName)}elementUnmatched(e){this.delegate.elementUnmatchedAttribute&&this.delegate.elementUnmatchedAttribute(e,this.attributeName)}elementAttributeChanged(e,t){this.delegate.elementAttributeValueChanged&&this.attributeName==t&&this.delegate.elementAttributeValueChanged(e,t)}}class p{constructor(e,t){this.element=e,this.delegate=t,this.started=!1,this.stringMap=new Map,this.mutationObserver=new MutationObserver((e=>this.processMutations(e)))}start(){this.started||(this.started=!0,this.mutationObserver.observe(this.element,{attributes:!0,attributeOldValue:!0}),this.refresh())}stop(){this.started&&(this.mutationObserver.takeRecords(),this.mutationObserver.disconnect(),this.started=!1)}refresh(){if(this.started)for(const e of this.knownAttributeNames)this.refreshAttribute(e,null)}processMutations(e){if(this.started)for(const t of e)this.processMutation(t)}processMutation(e){const t=e.attributeName;t&&this.refreshAttribute(t,e.oldValue)}refreshAttribute(e,t){const r=this.delegate.getStringMapKeyForAttribute(e);if(null!=r){this.stringMap.has(e)||this.stringMapKeyAdded(r,e);const s=this.element.getAttribute(e);if(this.stringMap.get(e)!=s&&this.stringMapValueChanged(s,r,t),null==s){const t=this.stringMap.get(e);this.stringMap.delete(e),t&&this.stringMapKeyRemoved(r,e,t)}else this.stringMap.set(e,s)}}stringMapKeyAdded(e,t){this.delegate.stringMapKeyAdded&&this.delegate.stringMapKeyAdded(e,t)}stringMapValueChanged(e,t,r){this.delegate.stringMapValueChanged&&this.delegate.stringMapValueChanged(e,t,r)}stringMapKeyRemoved(e,t,r){this.delegate.stringMapKeyRemoved&&this.delegate.stringMapKeyRemoved(e,t,r)}get knownAttributeNames(){return Array.from(new Set(this.currentAttributeNames.concat(this.recordedAttributeNames)))}get currentAttributeNames(){return Array.from(this.element.attributes).map((e=>e.name))}get recordedAttributeNames(){return Array.from(this.stringMap.keys())}}function f(e,t){let r=e.get(t);return r||(r=new Set,e.set(t,r)),r}class v{constructor(){this.valuesByKey=new Map}get keys(){return Array.from(this.valuesByKey.keys())}get values(){return Array.from(this.valuesByKey.values()).reduce(((e,t)=>e.concat(Array.from(t))),[])}get size(){return Array.from(this.valuesByKey.values()).reduce(((e,t)=>e+t.size),0)}add(e,t){!function(e,t,r){f(e,t).add(r)}(this.valuesByKey,e,t)}delete(e,t){!function(e,t,r){f(e,t).delete(r),function(e,t){const r=e.get(t);null!=r&&0==r.size&&e.delete(t)}(e,t)}(this.valuesByKey,e,t)}has(e,t){const r=this.valuesByKey.get(e);return null!=r&&r.has(t)}hasKey(e){return this.valuesByKey.has(e)}hasValue(e){return Array.from(this.valuesByKey.values()).some((t=>t.has(e)))}getValuesForKey(e){const t=this.valuesByKey.get(e);return t?Array.from(t):[]}getKeysForValue(e){return Array.from(this.valuesByKey).filter((([t,r])=>r.has(e))).map((([e,t])=>e))}}class b{constructor(e,t,r){this.attributeObserver=new m(e,t,this),this.delegate=r,this.tokensByElement=new v}get started(){return this.attributeObserver.started}start(){this.attributeObserver.start()}pause(e){this.attributeObserver.pause(e)}stop(){this.attributeObserver.stop()}refresh(){this.attributeObserver.refresh()}get element(){return this.attributeObserver.element}get attributeName(){return this.attributeObserver.attributeName}elementMatchedAttribute(e){this.tokensMatched(this.readTokensForElement(e))}elementAttributeValueChanged(e){const[t,r]=this.refreshTokensForElement(e);this.tokensUnmatched(t),this.tokensMatched(r)}elementUnmatchedAttribute(e){this.tokensUnmatched(this.tokensByElement.getValuesForKey(e))}tokensMatched(e){e.forEach((e=>this.tokenMatched(e)))}tokensUnmatched(e){e.forEach((e=>this.tokenUnmatched(e)))}tokenMatched(e){this.delegate.tokenMatched(e),this.tokensByElement.add(e.element,e)}tokenUnmatched(e){this.delegate.tokenUnmatched(e),this.tokensByElement.delete(e.element,e)}refreshTokensForElement(e){const t=this.tokensByElement.getValuesForKey(e),r=this.readTokensForElement(e),s=function(e,t){const r=Math.max(e.length,t.length);return Array.from({length:r},((r,s)=>[e[s],t[s]]))}(t,r).findIndex((([e,t])=>{return s=t,!((r=e)&&s&&r.index==s.index&&r.content==s.content);var r,s}));return-1==s?[[],[]]:[t.slice(s),r.slice(s)]}readTokensForElement(e){const t=this.attributeName;return function(e,t,r){return e.trim().split(/\s+/).filter((e=>e.length)).map(((e,s)=>({element:t,attributeName:r,content:e,index:s})))}(e.getAttribute(t)||"",e,t)}}class y{constructor(e,t,r){this.tokenListObserver=new b(e,t,this),this.delegate=r,this.parseResultsByToken=new WeakMap,this.valuesByTokenByElement=new WeakMap}get started(){return this.tokenListObserver.started}start(){this.tokenListObserver.start()}stop(){this.tokenListObserver.stop()}refresh(){this.tokenListObserver.refresh()}get element(){return this.tokenListObserver.element}get attributeName(){return this.tokenListObserver.attributeName}tokenMatched(e){const{element:t}=e,{value:r}=this.fetchParseResultForToken(e);r&&(this.fetchValuesByTokenForElement(t).set(e,r),this.delegate.elementMatchedValue(t,r))}tokenUnmatched(e){const{element:t}=e,{value:r}=this.fetchParseResultForToken(e);r&&(this.fetchValuesByTokenForElement(t).delete(e),this.delegate.elementUnmatchedValue(t,r))}fetchParseResultForToken(e){let t=this.parseResultsByToken.get(e);return t||(t=this.parseToken(e),this.parseResultsByToken.set(e,t)),t}fetchValuesByTokenForElement(e){let t=this.valuesByTokenByElement.get(e);return t||(t=new Map,this.valuesByTokenByElement.set(e,t)),t}parseToken(e){try{return{value:this.delegate.parseValueForToken(e)}}catch(e){return{error:e}}}}class A{constructor(e,t){this.context=e,this.delegate=t,this.bindingsByAction=new Map}start(){this.valueListObserver||(this.valueListObserver=new y(this.element,this.actionAttribute,this),this.valueListObserver.start())}stop(){this.valueListObserver&&(this.valueListObserver.stop(),delete this.valueListObserver,this.disconnectAllActions())}get element(){return this.context.element}get identifier(){return this.context.identifier}get actionAttribute(){return this.schema.actionAttribute}get schema(){return this.context.schema}get bindings(){return Array.from(this.bindingsByAction.values())}connectAction(e){const t=new d(this.context,e);this.bindingsByAction.set(e,t),this.delegate.bindingConnected(t)}disconnectAction(e){const t=this.bindingsByAction.get(e);t&&(this.bindingsByAction.delete(e),this.delegate.bindingDisconnected(t))}disconnectAllActions(){this.bindings.forEach((e=>this.delegate.bindingDisconnected(e))),this.bindingsByAction.clear()}parseValueForToken(e){const t=class{constructor(e,t,r){this.element=e,this.index=t,this.eventTarget=r.eventTarget||e,this.eventName=r.eventName||function(e){const t=e.tagName.toLowerCase();if(t in h)return h[t](e)}(e)||l("missing event name"),this.eventOptions=r.eventOptions||{},this.identifier=r.identifier||l("missing identifier"),this.methodName=r.methodName||l("missing method name")}static forToken(e){return new this(e.element,e.index,function(e){const t=e.trim().match(i)||[];return{eventTarget:(r=t[4],"window"==r?window:"document"==r?document:void 0),eventName:t[2],eventOptions:t[9]?(s=t[9],s.split(":").reduce(((e,t)=>Object.assign(e,{[t.replace(/^!/,"")]:!/^!/.test(t)})),{})):{},identifier:t[5],methodName:t[7]};var r,s}(e.content))}toString(){const e=this.eventTargetName?`@${this.eventTargetName}`:"";return`${this.eventName}${e}->${this.identifier}#${this.methodName}`}get params(){return this.eventTarget instanceof Element?this.getParamsFromEventTargetAttributes(this.eventTarget):{}}getParamsFromEventTargetAttributes(e){const t={},r=new RegExp(`^data-${this.identifier}-(.+)-param$`);return Array.from(e.attributes).forEach((({name:e,value:s})=>{const n=e.match(r),i=n&&n[1];i&&Object.assign(t,{[o(i)]:u(s)})})),t}get eventTargetName(){return(e=this.eventTarget)==window?"window":e==document?"document":void 0;var e}}.forToken(e);if(t.identifier==this.identifier)return t}elementMatchedValue(e,t){this.connectAction(t)}elementUnmatchedValue(e,t){this.disconnectAction(t)}}class E{constructor(e,t){this.context=e,this.receiver=t,this.stringMapObserver=new p(this.element,this),this.valueDescriptorMap=this.controller.valueDescriptorMap,this.invokeChangedCallbacksForDefaultValues()}start(){this.stringMapObserver.start()}stop(){this.stringMapObserver.stop()}get element(){return this.context.element}get controller(){return this.context.controller}getStringMapKeyForAttribute(e){if(e in this.valueDescriptorMap)return this.valueDescriptorMap[e].name}stringMapKeyAdded(e,t){const r=this.valueDescriptorMap[t];this.hasValue(e)||this.invokeChangedCallback(e,r.writer(this.receiver[e]),r.writer(r.defaultValue))}stringMapValueChanged(e,t,r){const s=this.valueDescriptorNameMap[t];null!==e&&(null===r&&(r=s.writer(s.defaultValue)),this.invokeChangedCallback(t,e,r))}stringMapKeyRemoved(e,t,r){const s=this.valueDescriptorNameMap[e];this.hasValue(e)?this.invokeChangedCallback(e,s.writer(this.receiver[e]),r):this.invokeChangedCallback(e,s.writer(s.defaultValue),r)}invokeChangedCallbacksForDefaultValues(){for(const{key:e,name:t,defaultValue:r,writer:s}of this.valueDescriptors)null==r||this.controller.data.has(e)||this.invokeChangedCallback(t,s(r),void 0)}invokeChangedCallback(e,t,r){const s=`${e}Changed`,n=this.receiver[s];if("function"==typeof n){const s=this.valueDescriptorNameMap[e],i=s.reader(t);let o=r;r&&(o=s.reader(r)),n.call(this.receiver,i,o)}}get valueDescriptors(){const{valueDescriptorMap:e}=this;return Object.keys(e).map((t=>e[t]))}get valueDescriptorNameMap(){const e={};return Object.keys(this.valueDescriptorMap).forEach((t=>{const r=this.valueDescriptorMap[t];e[r.name]=r})),e}hasValue(e){const t=`has${a(this.valueDescriptorNameMap[e].name)}`;return this.receiver[t]}}class O{constructor(e,t){this.context=e,this.delegate=t,this.targetsByName=new v}start(){this.tokenListObserver||(this.tokenListObserver=new b(this.element,this.attributeName,this),this.tokenListObserver.start())}stop(){this.tokenListObserver&&(this.disconnectAllTargets(),this.tokenListObserver.stop(),delete this.tokenListObserver)}tokenMatched({element:e,content:t}){this.scope.containsElement(e)&&this.connectTarget(e,t)}tokenUnmatched({element:e,content:t}){this.disconnectTarget(e,t)}connectTarget(e,t){var r;this.targetsByName.has(t,e)||(this.targetsByName.add(t,e),null===(r=this.tokenListObserver)||void 0===r||r.pause((()=>this.delegate.targetConnected(e,t))))}disconnectTarget(e,t){var r;this.targetsByName.has(t,e)&&(this.targetsByName.delete(t,e),null===(r=this.tokenListObserver)||void 0===r||r.pause((()=>this.delegate.targetDisconnected(e,t))))}disconnectAllTargets(){for(const e of this.targetsByName.keys)for(const t of this.targetsByName.getValuesForKey(e))this.disconnectTarget(t,e)}get attributeName(){return`data-${this.context.identifier}-target`}get element(){return this.context.element}get scope(){return this.context.scope}}class w{constructor(e,t){this.logDebugActivity=(e,t={})=>{const{identifier:r,controller:s,element:n}=this;t=Object.assign({identifier:r,controller:s,element:n},t),this.application.logDebugActivity(this.identifier,e,t)},this.module=e,this.scope=t,this.controller=new e.controllerConstructor(this),this.bindingObserver=new A(this,this.dispatcher),this.valueObserver=new E(this,this.controller),this.targetObserver=new O(this,this);try{this.controller.initialize(),this.logDebugActivity("initialize")}catch(e){this.handleError(e,"initializing controller")}}connect(){this.bindingObserver.start(),this.valueObserver.start(),this.targetObserver.start();try{this.controller.connect(),this.logDebugActivity("connect")}catch(e){this.handleError(e,"connecting controller")}}disconnect(){try{this.controller.disconnect(),this.logDebugActivity("disconnect")}catch(e){this.handleError(e,"disconnecting controller")}this.targetObserver.stop(),this.valueObserver.stop(),this.bindingObserver.stop()}get application(){return this.module.application}get identifier(){return this.module.identifier}get schema(){return this.application.schema}get dispatcher(){return this.application.dispatcher}get element(){return this.scope.element}get parentElement(){return this.element.parentElement}handleError(e,t,r={}){const{identifier:s,controller:n,element:i}=this;r=Object.assign({identifier:s,controller:n,element:i},r),this.application.handleError(e,`Error ${t}`,r)}targetConnected(e,t){this.invokeControllerMethod(`${t}TargetConnected`,e)}targetDisconnected(e,t){this.invokeControllerMethod(`${t}TargetDisconnected`,e)}invokeControllerMethod(e,...t){const r=this.controller;"function"==typeof r[e]&&r[e](...t)}}function k(e,t){const r=M(e);return Array.from(r.reduce(((e,r)=>(function(e,t){const r=e[t];return Array.isArray(r)?r:[]}(r,t).forEach((t=>e.add(t))),e)),new Set))}function M(e){const t=[];for(;e;)t.push(e),e=Object.getPrototypeOf(e);return t.reverse()}const T="function"==typeof Object.getOwnPropertySymbols?e=>[...Object.getOwnPropertyNames(e),...Object.getOwnPropertySymbols(e)]:Object.getOwnPropertyNames,N=(()=>{function e(e){function t(){return Reflect.construct(e,arguments,new.target)}return t.prototype=Object.create(e.prototype,{constructor:{value:t}}),Reflect.setPrototypeOf(t,e),t}try{return function(){const t=e((function(){this.a.call(this)}));t.prototype.a=function(){},new t}(),e}catch(e){return e=>class extends e{}}})();class C{constructor(e,t){this.application=e,this.definition=function(e){return{identifier:e.identifier,controllerConstructor:(t=e.controllerConstructor,function(e,t){const r=N(e),s=function(e,t){return T(t).reduce(((r,s)=>{const n=function(e,t,r){const s=Object.getOwnPropertyDescriptor(e,r);if(!s||!("value"in s)){const e=Object.getOwnPropertyDescriptor(t,r).value;return s&&(e.get=s.get||e.get,e.set=s.set||e.set),e}}(e,t,s);return n&&Object.assign(r,{[s]:n}),r}),{})}(e.prototype,t);return Object.defineProperties(r.prototype,s),r}(t,function(e){return k(e,"blessings").reduce(((t,r)=>{const s=r(e);for(const e in s){const r=t[e]||{};t[e]=Object.assign(r,s[e])}return t}),{})}(t)))};var t}(t),this.contextsByScope=new WeakMap,this.connectedContexts=new Set}get identifier(){return this.definition.identifier}get controllerConstructor(){return this.definition.controllerConstructor}get contexts(){return Array.from(this.connectedContexts)}connectContextForScope(e){const t=this.fetchContextForScope(e);this.connectedContexts.add(t),t.connect()}disconnectContextForScope(e){const t=this.contextsByScope.get(e);t&&(this.connectedContexts.delete(t),t.disconnect())}fetchContextForScope(e){let t=this.contextsByScope.get(e);return t||(t=new w(this,e),this.contextsByScope.set(e,t)),t}}class B{constructor(e){this.scope=e}has(e){return this.data.has(this.getDataKey(e))}get(e){return this.getAll(e)[0]}getAll(e){return(this.data.get(this.getDataKey(e))||"").match(/[^\s]+/g)||[]}getAttributeName(e){return this.data.getAttributeNameForKey(this.getDataKey(e))}getDataKey(e){return`${e}-class`}get data(){return this.scope.data}}class x{constructor(e){this.scope=e}get element(){return this.scope.element}get identifier(){return this.scope.identifier}get(e){const t=this.getAttributeNameForKey(e);return this.element.getAttribute(t)}set(e,t){const r=this.getAttributeNameForKey(e);return this.element.setAttribute(r,t),this.get(e)}has(e){const t=this.getAttributeNameForKey(e);return this.element.hasAttribute(t)}delete(e){if(this.has(e)){const t=this.getAttributeNameForKey(e);return this.element.removeAttribute(t),!0}return!1}getAttributeNameForKey(e){return`data-${this.identifier}-${c(e)}`}}class F{constructor(e){this.warnedKeysByObject=new WeakMap,this.logger=e}warn(e,t,r){let s=this.warnedKeysByObject.get(e);s||(s=new Set,this.warnedKeysByObject.set(e,s)),s.has(t)||(s.add(t),this.logger.warn(r,e))}}function L(e,t){return`[${e}~="${t}"]`}class S{constructor(e){this.scope=e}get element(){return this.scope.element}get identifier(){return this.scope.identifier}get schema(){return this.scope.schema}has(e){return null!=this.find(e)}find(...e){return e.reduce(((e,t)=>e||this.findTarget(t)||this.findLegacyTarget(t)),void 0)}findAll(...e){return e.reduce(((e,t)=>[...e,...this.findAllTargets(t),...this.findAllLegacyTargets(t)]),[])}findTarget(e){const t=this.getSelectorForTargetName(e);return this.scope.findElement(t)}findAllTargets(e){const t=this.getSelectorForTargetName(e);return this.scope.findAllElements(t)}getSelectorForTargetName(e){return L(this.schema.targetAttributeForScope(this.identifier),e)}findLegacyTarget(e){const t=this.getLegacySelectorForTargetName(e);return this.deprecate(this.scope.findElement(t),e)}findAllLegacyTargets(e){const t=this.getLegacySelectorForTargetName(e);return this.scope.findAllElements(t).map((t=>this.deprecate(t,e)))}getLegacySelectorForTargetName(e){const t=`${this.identifier}.${e}`;return L(this.schema.targetAttribute,t)}deprecate(e,t){if(e){const{identifier:r}=this,s=this.schema.targetAttribute,n=this.schema.targetAttributeForScope(r);this.guide.warn(e,`target:${t}`,`Please replace ${s}="${r}.${t}" with ${n}="${t}". The ${s} attribute is deprecated and will be removed in a future version of Stimulus.`)}return e}get guide(){return this.scope.guide}}class ${constructor(e,t,r,s){this.targets=new S(this),this.classes=new B(this),this.data=new x(this),this.containsElement=e=>e.closest(this.controllerSelector)===this.element,this.schema=e,this.element=t,this.identifier=r,this.guide=new F(s)}findElement(e){return this.element.matches(e)?this.element:this.queryElements(e).find(this.containsElement)}findAllElements(e){return[...this.element.matches(e)?[this.element]:[],...this.queryElements(e).filter(this.containsElement)]}queryElements(e){return Array.from(this.element.querySelectorAll(e))}get controllerSelector(){return L(this.schema.controllerAttribute,this.identifier)}}class D{constructor(e,t,r){this.element=e,this.schema=t,this.delegate=r,this.valueListObserver=new y(this.element,this.controllerAttribute,this),this.scopesByIdentifierByElement=new WeakMap,this.scopeReferenceCounts=new WeakMap}start(){this.valueListObserver.start()}stop(){this.valueListObserver.stop()}get controllerAttribute(){return this.schema.controllerAttribute}parseValueForToken(e){const{element:t,content:r}=e,s=this.fetchScopesByIdentifierForElement(t);let n=s.get(r);return n||(n=this.delegate.createScopeForElementAndIdentifier(t,r),s.set(r,n)),n}elementMatchedValue(e,t){const r=(this.scopeReferenceCounts.get(t)||0)+1;this.scopeReferenceCounts.set(t,r),1==r&&this.delegate.scopeConnected(t)}elementUnmatchedValue(e,t){const r=this.scopeReferenceCounts.get(t);r&&(this.scopeReferenceCounts.set(t,r-1),1==r&&this.delegate.scopeDisconnected(t))}fetchScopesByIdentifierForElement(e){let t=this.scopesByIdentifierByElement.get(e);return t||(t=new Map,this.scopesByIdentifierByElement.set(e,t)),t}}class j{constructor(e){this.application=e,this.scopeObserver=new D(this.element,this.schema,this),this.scopesByIdentifier=new v,this.modulesByIdentifier=new Map}get element(){return this.application.element}get schema(){return this.application.schema}get logger(){return this.application.logger}get controllerAttribute(){return this.schema.controllerAttribute}get modules(){return Array.from(this.modulesByIdentifier.values())}get contexts(){return this.modules.reduce(((e,t)=>e.concat(t.contexts)),[])}start(){this.scopeObserver.start()}stop(){this.scopeObserver.stop()}loadDefinition(e){this.unloadIdentifier(e.identifier);const t=new C(this.application,e);this.connectModule(t)}unloadIdentifier(e){const t=this.modulesByIdentifier.get(e);t&&this.disconnectModule(t)}getContextForElementAndIdentifier(e,t){const r=this.modulesByIdentifier.get(t);if(r)return r.contexts.find((t=>t.element==e))}handleError(e,t,r){this.application.handleError(e,t,r)}createScopeForElementAndIdentifier(e,t){return new $(this.schema,e,t,this.logger)}scopeConnected(e){this.scopesByIdentifier.add(e.identifier,e);const t=this.modulesByIdentifier.get(e.identifier);t&&t.connectContextForScope(e)}scopeDisconnected(e){this.scopesByIdentifier.delete(e.identifier,e);const t=this.modulesByIdentifier.get(e.identifier);t&&t.disconnectContextForScope(e)}connectModule(e){this.modulesByIdentifier.set(e.identifier,e),this.scopesByIdentifier.getValuesForKey(e.identifier).forEach((t=>e.connectContextForScope(t)))}disconnectModule(e){this.modulesByIdentifier.delete(e.identifier),this.scopesByIdentifier.getValuesForKey(e.identifier).forEach((t=>e.disconnectContextForScope(t)))}}const K={controllerAttribute:"data-controller",actionAttribute:"data-action",targetAttribute:"data-target",targetAttributeForScope:e=>`data-${e}-target`};class V{constructor(e=document.documentElement,t=K){this.logger=console,this.debug=!1,this.logDebugActivity=(e,t,r={})=>{this.debug&&this.logFormattedMessage(e,t,r)},this.element=e,this.schema=t,this.dispatcher=new n(this),this.router=new j(this)}static start(e,t){const r=new V(e,t);return r.start(),r}async start(){await new Promise((e=>{"loading"==document.readyState?document.addEventListener("DOMContentLoaded",(()=>e())):e()})),this.logDebugActivity("application","starting"),this.dispatcher.start(),this.router.start(),this.logDebugActivity("application","start")}stop(){this.logDebugActivity("application","stopping"),this.dispatcher.stop(),this.router.stop(),this.logDebugActivity("application","stop")}register(e,t){t.shouldLoad&&this.load({identifier:e,controllerConstructor:t})}load(e,...t){(Array.isArray(e)?e:[e,...t]).forEach((e=>this.router.loadDefinition(e)))}unload(e,...t){(Array.isArray(e)?e:[e,...t]).forEach((e=>this.router.unloadIdentifier(e)))}get controllers(){return this.router.contexts.map((e=>e.controller))}getControllerForElementAndIdentifier(e,t){const r=this.router.getContextForElementAndIdentifier(e,t);return r?r.controller:null}handleError(e,t,r){var s;this.logger.error("%s\n\n%o\n\n%o",t,e,r),null===(s=window.onerror)||void 0===s||s.call(window,t,"",0,0,e)}logFormattedMessage(e,t,r={}){r=Object.assign({application:this},r),this.logger.groupCollapsed(`${e} #${t}`),this.logger.log("details:",Object.assign({},r)),this.logger.groupEnd()}}function I([e,t]){return function(e,t){const r=`${c(e)}-value`,s=function(e){const t=function(e){const t=P(e.type);if(t){const r=R(e.default);if(t!==r)throw new Error(`Type "${t}" must match the type of the default value. Given default value: "${e.default}" as "${r}"`);return t}}(e),r=R(e),s=P(e),n=t||r||s;if(n)return n;throw new Error(`Unknown value type "${e}"`)}(t);return{type:s,key:r,name:o(r),get defaultValue(){return function(e){const t=P(e);if(t)return U[t];const r=e.default;return void 0!==r?r:e}(t)},get hasCustomDefaultValue(){return void 0!==R(t)},reader:_[s],writer:z[s]||z.default}}(e,t)}function P(e){switch(e){case Array:return"array";case Boolean:return"boolean";case Number:return"number";case Object:return"object";case String:return"string"}}function R(e){switch(typeof e){case"boolean":return"boolean";case"number":return"number";case"string":return"string"}return Array.isArray(e)?"array":"[object Object]"===Object.prototype.toString.call(e)?"object":void 0}const U={get array(){return[]},boolean:!1,number:0,get object(){return{}},string:""},_={array(e){const t=JSON.parse(e);if(!Array.isArray(t))throw new TypeError("Expected array");return t},boolean:e=>!("0"==e||"false"==e),number:e=>Number(e),object(e){const t=JSON.parse(e);if(null===t||"object"!=typeof t||Array.isArray(t))throw new TypeError("Expected object");return t},string:e=>e},z={default:function(e){return`${e}`},array:W,object:W};function W(e){return JSON.stringify(e)}class q{constructor(e){this.context=e}static get shouldLoad(){return!0}get application(){return this.context.application}get scope(){return this.context.scope}get element(){return this.scope.element}get identifier(){return this.scope.identifier}get targets(){return this.scope.targets}get classes(){return this.scope.classes}get data(){return this.scope.data}initialize(){}connect(){}disconnect(){}dispatch(e,{target:t=this.element,detail:r={},prefix:s=this.identifier,bubbles:n=!0,cancelable:i=!0}={}){const o=new CustomEvent(s?`${s}:${e}`:e,{detail:r,bubbles:n,cancelable:i});return t.dispatchEvent(o),o}}q.blessings=[function(e){return k(e,"classes").reduce(((e,t)=>{return Object.assign(e,{[`${r=t}Class`]:{get(){const{classes:e}=this;if(e.has(r))return e.get(r);{const t=e.getAttributeName(r);throw new Error(`Missing attribute "${t}"`)}}},[`${r}Classes`]:{get(){return this.classes.getAll(r)}},[`has${a(r)}Class`]:{get(){return this.classes.has(r)}}});var r}),{})},function(e){return k(e,"targets").reduce(((e,t)=>{return Object.assign(e,{[`${r=t}Target`]:{get(){const e=this.targets.find(r);if(e)return e;throw new Error(`Missing target element "${r}" for "${this.identifier}" controller`)}},[`${r}Targets`]:{get(){return this.targets.findAll(r)}},[`has${a(r)}Target`]:{get(){return this.targets.has(r)}}});var r}),{})},function(e){const t=function(e,t){return M(e).reduce(((e,r)=>(e.push(...function(e,t){const r=e[t];return r?Object.keys(r).map((e=>[e,r[e]])):[]}(r,t)),e)),[])}(e,"values"),r={valueDescriptorMap:{get(){return t.reduce(((e,t)=>{const r=I(t),s=this.data.getAttributeNameForKey(r.key);return Object.assign(e,{[s]:r})}),{})}}};return t.reduce(((e,t)=>Object.assign(e,function(e){const t=I(e),{key:r,name:s,reader:n,writer:i}=t;return{[s]:{get(){const e=this.data.get(r);return null!==e?n(e):t.defaultValue},set(e){void 0===e?this.data.delete(r):this.data.set(r,i(e))}},[`has${a(s)}`]:{get(){return this.data.has(r)||t.hasCustomDefaultValue}}}}(t))),r)}],q.targets=[],q.values={}},197:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var s=r(599),n=r(786);class i extends s.Qr{connect(){this.load(),document.addEventListener(n.Z.eventName,(e=>this.preview(e)))}load(){fetch("./preview.html").then((e=>e.text())).then((e=>this.element.innerHTML=e))}preview(e){this.containerTarget.style.backgroundColor=e.color,this.linkTarget.innerHTML=e.text,this.linkTarget.href=e.url,null!==e.file&&(this.imageTarget.src=e.file)}}i.targets=["container","link","image"]},185:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var s=r(599),n=r(786);class i extends s.Qr{connect(){this.load()}load(){fetch("./setting.html").then((e=>e.text())).then((e=>this.element.innerHTML=e))}change(){if(0===this.fileTarget.files.length)return void document.dispatchEvent(new n.Z(this.textTarget.value,this.colorTarget.value,this.urlTarget.value,null));const e=new FileReader;e.onload=e=>{const t=e.target.result;document.dispatchEvent(new n.Z(this.textTarget.value,this.colorTarget.value,this.urlTarget.value,t))},e.readAsDataURL(this.fileTarget.files[0])}}i.targets=["text","color","file","url"]},786:(e,t,r)=>{"use strict";r.d(t,{Z:()=>s});class s extends Event{constructor(e,t,r,n){super(s.eventName),this.text=e,this.color=t,this.url=r,this.file=n}}s.eventName="setting-change-event"},388:(e,t,r)=>{var s={"./preview_controller.ts":197,"./setting_controller.ts":185};function n(e){var t=i(e);return r(t)}function i(e){if(!r.o(s,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return s[e]}n.keys=function(){return Object.keys(s)},n.resolve=i,e.exports=n,n.id=388}},t={};function r(s){var n=t[s];if(void 0!==n)return n.exports;var i=t[s]={exports:{}};return e[s](i,i.exports,r),i.exports}r.d=(e,t)=>{for(var s in t)r.o(t,s)&&!r.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{"use strict";const e=r(599).Mx.start(),t=r(388);e.load(function(e){return e.keys().map((t=>function(e,t){const r=function(e){const t=(e.match(/^(?:\.\/)?(.+)(?:[_-]controller\..+?)$/)||[])[1];if(t)return t.replace(/_/g,"-").replace(/\//g,"--")}(t);if(r)return function(e,t){const r=e.default;if("function"==typeof r)return{identifier:t,controllerConstructor:r}}(e(t),r)}(e,t))).filter((e=>e))}(t))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUF6QjlJLEVBQ1AsTUFBTyxDQUFFak0sV0FBQUEsRUFBWWlNLHNCQUFBQSxHQU5kOE8sQ0FBaUNqYixFQUFReEIsR0FBTTBCLEdBTnhDZ2IsQ0FBcUNsYixFQUFTeEIsS0FDM0R5SCxRQUFRcEgsR0FBVUEsSURGYnNjLENBQXVCbmIsSyIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uL25vZGVfbW9kdWxlcy9AaG90d2lyZWQvc3RpbXVsdXMvZGlzdC9zdGltdWx1cy5qcyIsIndlYnBhY2s6Ly93ZWIvLi9zcmMvY29udHJvbGxlcnMvcHJldmlld19jb250cm9sbGVyLnRzIiwid2VicGFjazovL3dlYi8uL3NyYy9jb250cm9sbGVycy9zZXR0aW5nX2NvbnRyb2xsZXIudHMiLCJ3ZWJwYWNrOi8vd2ViLy4vc3JjL2V2ZW50L1NldHRpbmdzQ2hhbmdlZEV2ZW50LnRzIiwid2VicGFjazovL3dlYi8vVXNlcnMvZGFyaXVzL2Rldi90YW1vLW1lbnUtcGxheWdyb3VuZC9zcmMvY29udHJvbGxlcnN8c3luY3wvXFwudHMkLyIsIndlYnBhY2s6Ly93ZWIvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vd2ViL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly93ZWIvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly93ZWIvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly93ZWIvLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vd2ViLy4vbm9kZV9tb2R1bGVzL0Bob3R3aXJlZC9zdGltdWx1cy13ZWJwYWNrLWhlbHBlcnMvZGlzdC9zdGltdWx1cy13ZWJwYWNrLWhlbHBlcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcblN0aW11bHVzIDMuMC4xXG5Db3B5cmlnaHQgwqkgMjAyMSBCYXNlY2FtcCwgTExDXG4gKi9cbmNsYXNzIEV2ZW50TGlzdGVuZXIge1xuICAgIGNvbnN0cnVjdG9yKGV2ZW50VGFyZ2V0LCBldmVudE5hbWUsIGV2ZW50T3B0aW9ucykge1xuICAgICAgICB0aGlzLmV2ZW50VGFyZ2V0ID0gZXZlbnRUYXJnZXQ7XG4gICAgICAgIHRoaXMuZXZlbnROYW1lID0gZXZlbnROYW1lO1xuICAgICAgICB0aGlzLmV2ZW50T3B0aW9ucyA9IGV2ZW50T3B0aW9ucztcbiAgICAgICAgdGhpcy51bm9yZGVyZWRCaW5kaW5ncyA9IG5ldyBTZXQoKTtcbiAgICB9XG4gICAgY29ubmVjdCgpIHtcbiAgICAgICAgdGhpcy5ldmVudFRhcmdldC5hZGRFdmVudExpc3RlbmVyKHRoaXMuZXZlbnROYW1lLCB0aGlzLCB0aGlzLmV2ZW50T3B0aW9ucyk7XG4gICAgfVxuICAgIGRpc2Nvbm5lY3QoKSB7XG4gICAgICAgIHRoaXMuZXZlbnRUYXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLmV2ZW50TmFtZSwgdGhpcywgdGhpcy5ldmVudE9wdGlvbnMpO1xuICAgIH1cbiAgICBiaW5kaW5nQ29ubmVjdGVkKGJpbmRpbmcpIHtcbiAgICAgICAgdGhpcy51bm9yZGVyZWRCaW5kaW5ncy5hZGQoYmluZGluZyk7XG4gICAgfVxuICAgIGJpbmRpbmdEaXNjb25uZWN0ZWQoYmluZGluZykge1xuICAgICAgICB0aGlzLnVub3JkZXJlZEJpbmRpbmdzLmRlbGV0ZShiaW5kaW5nKTtcbiAgICB9XG4gICAgaGFuZGxlRXZlbnQoZXZlbnQpIHtcbiAgICAgICAgY29uc3QgZXh0ZW5kZWRFdmVudCA9IGV4dGVuZEV2ZW50KGV2ZW50KTtcbiAgICAgICAgZm9yIChjb25zdCBiaW5kaW5nIG9mIHRoaXMuYmluZGluZ3MpIHtcbiAgICAgICAgICAgIGlmIChleHRlbmRlZEV2ZW50LmltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYmluZGluZy5oYW5kbGVFdmVudChleHRlbmRlZEV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgYmluZGluZ3MoKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMudW5vcmRlcmVkQmluZGluZ3MpLnNvcnQoKGxlZnQsIHJpZ2h0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBsZWZ0SW5kZXggPSBsZWZ0LmluZGV4LCByaWdodEluZGV4ID0gcmlnaHQuaW5kZXg7XG4gICAgICAgICAgICByZXR1cm4gbGVmdEluZGV4IDwgcmlnaHRJbmRleCA/IC0xIDogbGVmdEluZGV4ID4gcmlnaHRJbmRleCA/IDEgOiAwO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5mdW5jdGlvbiBleHRlbmRFdmVudChldmVudCkge1xuICAgIGlmIChcImltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZFwiIGluIGV2ZW50KSB7XG4gICAgICAgIHJldHVybiBldmVudDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IHsgc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIH0gPSBldmVudDtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oZXZlbnQsIHtcbiAgICAgICAgICAgIGltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDogZmFsc2UsXG4gICAgICAgICAgICBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbi5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmNsYXNzIERpc3BhdGNoZXIge1xuICAgIGNvbnN0cnVjdG9yKGFwcGxpY2F0aW9uKSB7XG4gICAgICAgIHRoaXMuYXBwbGljYXRpb24gPSBhcHBsaWNhdGlvbjtcbiAgICAgICAgdGhpcy5ldmVudExpc3RlbmVyTWFwcyA9IG5ldyBNYXA7XG4gICAgICAgIHRoaXMuc3RhcnRlZCA9IGZhbHNlO1xuICAgIH1cbiAgICBzdGFydCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnN0YXJ0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmV2ZW50TGlzdGVuZXJzLmZvckVhY2goZXZlbnRMaXN0ZW5lciA9PiBldmVudExpc3RlbmVyLmNvbm5lY3QoKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RvcCgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhcnRlZCkge1xuICAgICAgICAgICAgdGhpcy5zdGFydGVkID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmV2ZW50TGlzdGVuZXJzLmZvckVhY2goZXZlbnRMaXN0ZW5lciA9PiBldmVudExpc3RlbmVyLmRpc2Nvbm5lY3QoKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGV2ZW50TGlzdGVuZXJzKCkge1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLmV2ZW50TGlzdGVuZXJNYXBzLnZhbHVlcygpKVxuICAgICAgICAgICAgLnJlZHVjZSgobGlzdGVuZXJzLCBtYXApID0+IGxpc3RlbmVycy5jb25jYXQoQXJyYXkuZnJvbShtYXAudmFsdWVzKCkpKSwgW10pO1xuICAgIH1cbiAgICBiaW5kaW5nQ29ubmVjdGVkKGJpbmRpbmcpIHtcbiAgICAgICAgdGhpcy5mZXRjaEV2ZW50TGlzdGVuZXJGb3JCaW5kaW5nKGJpbmRpbmcpLmJpbmRpbmdDb25uZWN0ZWQoYmluZGluZyk7XG4gICAgfVxuICAgIGJpbmRpbmdEaXNjb25uZWN0ZWQoYmluZGluZykge1xuICAgICAgICB0aGlzLmZldGNoRXZlbnRMaXN0ZW5lckZvckJpbmRpbmcoYmluZGluZykuYmluZGluZ0Rpc2Nvbm5lY3RlZChiaW5kaW5nKTtcbiAgICB9XG4gICAgaGFuZGxlRXJyb3IoZXJyb3IsIG1lc3NhZ2UsIGRldGFpbCA9IHt9KSB7XG4gICAgICAgIHRoaXMuYXBwbGljYXRpb24uaGFuZGxlRXJyb3IoZXJyb3IsIGBFcnJvciAke21lc3NhZ2V9YCwgZGV0YWlsKTtcbiAgICB9XG4gICAgZmV0Y2hFdmVudExpc3RlbmVyRm9yQmluZGluZyhiaW5kaW5nKSB7XG4gICAgICAgIGNvbnN0IHsgZXZlbnRUYXJnZXQsIGV2ZW50TmFtZSwgZXZlbnRPcHRpb25zIH0gPSBiaW5kaW5nO1xuICAgICAgICByZXR1cm4gdGhpcy5mZXRjaEV2ZW50TGlzdGVuZXIoZXZlbnRUYXJnZXQsIGV2ZW50TmFtZSwgZXZlbnRPcHRpb25zKTtcbiAgICB9XG4gICAgZmV0Y2hFdmVudExpc3RlbmVyKGV2ZW50VGFyZ2V0LCBldmVudE5hbWUsIGV2ZW50T3B0aW9ucykge1xuICAgICAgICBjb25zdCBldmVudExpc3RlbmVyTWFwID0gdGhpcy5mZXRjaEV2ZW50TGlzdGVuZXJNYXBGb3JFdmVudFRhcmdldChldmVudFRhcmdldCk7XG4gICAgICAgIGNvbnN0IGNhY2hlS2V5ID0gdGhpcy5jYWNoZUtleShldmVudE5hbWUsIGV2ZW50T3B0aW9ucyk7XG4gICAgICAgIGxldCBldmVudExpc3RlbmVyID0gZXZlbnRMaXN0ZW5lck1hcC5nZXQoY2FjaGVLZXkpO1xuICAgICAgICBpZiAoIWV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGV2ZW50TGlzdGVuZXIgPSB0aGlzLmNyZWF0ZUV2ZW50TGlzdGVuZXIoZXZlbnRUYXJnZXQsIGV2ZW50TmFtZSwgZXZlbnRPcHRpb25zKTtcbiAgICAgICAgICAgIGV2ZW50TGlzdGVuZXJNYXAuc2V0KGNhY2hlS2V5LCBldmVudExpc3RlbmVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXZlbnRMaXN0ZW5lcjtcbiAgICB9XG4gICAgY3JlYXRlRXZlbnRMaXN0ZW5lcihldmVudFRhcmdldCwgZXZlbnROYW1lLCBldmVudE9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgZXZlbnRMaXN0ZW5lciA9IG5ldyBFdmVudExpc3RlbmVyKGV2ZW50VGFyZ2V0LCBldmVudE5hbWUsIGV2ZW50T3B0aW9ucyk7XG4gICAgICAgIGlmICh0aGlzLnN0YXJ0ZWQpIHtcbiAgICAgICAgICAgIGV2ZW50TGlzdGVuZXIuY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBldmVudExpc3RlbmVyO1xuICAgIH1cbiAgICBmZXRjaEV2ZW50TGlzdGVuZXJNYXBGb3JFdmVudFRhcmdldChldmVudFRhcmdldCkge1xuICAgICAgICBsZXQgZXZlbnRMaXN0ZW5lck1hcCA9IHRoaXMuZXZlbnRMaXN0ZW5lck1hcHMuZ2V0KGV2ZW50VGFyZ2V0KTtcbiAgICAgICAgaWYgKCFldmVudExpc3RlbmVyTWFwKSB7XG4gICAgICAgICAgICBldmVudExpc3RlbmVyTWFwID0gbmV3IE1hcDtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRMaXN0ZW5lck1hcHMuc2V0KGV2ZW50VGFyZ2V0LCBldmVudExpc3RlbmVyTWFwKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXZlbnRMaXN0ZW5lck1hcDtcbiAgICB9XG4gICAgY2FjaGVLZXkoZXZlbnROYW1lLCBldmVudE9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgcGFydHMgPSBbZXZlbnROYW1lXTtcbiAgICAgICAgT2JqZWN0LmtleXMoZXZlbnRPcHRpb25zKS5zb3J0KCkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgICAgcGFydHMucHVzaChgJHtldmVudE9wdGlvbnNba2V5XSA/IFwiXCIgOiBcIiFcIn0ke2tleX1gKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwYXJ0cy5qb2luKFwiOlwiKTtcbiAgICB9XG59XG5cbmNvbnN0IGRlc2NyaXB0b3JQYXR0ZXJuID0gL14oKC4rPykoQCh3aW5kb3d8ZG9jdW1lbnQpKT8tPik/KC4rPykoIyhbXjpdKz8pKSg6KC4rKSk/JC87XG5mdW5jdGlvbiBwYXJzZUFjdGlvbkRlc2NyaXB0b3JTdHJpbmcoZGVzY3JpcHRvclN0cmluZykge1xuICAgIGNvbnN0IHNvdXJjZSA9IGRlc2NyaXB0b3JTdHJpbmcudHJpbSgpO1xuICAgIGNvbnN0IG1hdGNoZXMgPSBzb3VyY2UubWF0Y2goZGVzY3JpcHRvclBhdHRlcm4pIHx8IFtdO1xuICAgIHJldHVybiB7XG4gICAgICAgIGV2ZW50VGFyZ2V0OiBwYXJzZUV2ZW50VGFyZ2V0KG1hdGNoZXNbNF0pLFxuICAgICAgICBldmVudE5hbWU6IG1hdGNoZXNbMl0sXG4gICAgICAgIGV2ZW50T3B0aW9uczogbWF0Y2hlc1s5XSA/IHBhcnNlRXZlbnRPcHRpb25zKG1hdGNoZXNbOV0pIDoge30sXG4gICAgICAgIGlkZW50aWZpZXI6IG1hdGNoZXNbNV0sXG4gICAgICAgIG1ldGhvZE5hbWU6IG1hdGNoZXNbN11cbiAgICB9O1xufVxuZnVuY3Rpb24gcGFyc2VFdmVudFRhcmdldChldmVudFRhcmdldE5hbWUpIHtcbiAgICBpZiAoZXZlbnRUYXJnZXROYW1lID09IFwid2luZG93XCIpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdztcbiAgICB9XG4gICAgZWxzZSBpZiAoZXZlbnRUYXJnZXROYW1lID09IFwiZG9jdW1lbnRcIikge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnQ7XG4gICAgfVxufVxuZnVuY3Rpb24gcGFyc2VFdmVudE9wdGlvbnMoZXZlbnRPcHRpb25zKSB7XG4gICAgcmV0dXJuIGV2ZW50T3B0aW9ucy5zcGxpdChcIjpcIikucmVkdWNlKChvcHRpb25zLCB0b2tlbikgPT4gT2JqZWN0LmFzc2lnbihvcHRpb25zLCB7IFt0b2tlbi5yZXBsYWNlKC9eIS8sIFwiXCIpXTogIS9eIS8udGVzdCh0b2tlbikgfSksIHt9KTtcbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeUV2ZW50VGFyZ2V0KGV2ZW50VGFyZ2V0KSB7XG4gICAgaWYgKGV2ZW50VGFyZ2V0ID09IHdpbmRvdykge1xuICAgICAgICByZXR1cm4gXCJ3aW5kb3dcIjtcbiAgICB9XG4gICAgZWxzZSBpZiAoZXZlbnRUYXJnZXQgPT0gZG9jdW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIFwiZG9jdW1lbnRcIjtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNhbWVsaXplKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoLyg/OltfLV0pKFthLXowLTldKS9nLCAoXywgY2hhcikgPT4gY2hhci50b1VwcGVyQ2FzZSgpKTtcbn1cbmZ1bmN0aW9uIGNhcGl0YWxpemUodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB2YWx1ZS5zbGljZSgxKTtcbn1cbmZ1bmN0aW9uIGRhc2hlcml6ZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC8oW0EtWl0pL2csIChfLCBjaGFyKSA9PiBgLSR7Y2hhci50b0xvd2VyQ2FzZSgpfWApO1xufVxuZnVuY3Rpb24gdG9rZW5pemUodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUubWF0Y2goL1teXFxzXSsvZykgfHwgW107XG59XG5cbmNsYXNzIEFjdGlvbiB7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudCwgaW5kZXgsIGRlc2NyaXB0b3IpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4O1xuICAgICAgICB0aGlzLmV2ZW50VGFyZ2V0ID0gZGVzY3JpcHRvci5ldmVudFRhcmdldCB8fCBlbGVtZW50O1xuICAgICAgICB0aGlzLmV2ZW50TmFtZSA9IGRlc2NyaXB0b3IuZXZlbnROYW1lIHx8IGdldERlZmF1bHRFdmVudE5hbWVGb3JFbGVtZW50KGVsZW1lbnQpIHx8IGVycm9yKFwibWlzc2luZyBldmVudCBuYW1lXCIpO1xuICAgICAgICB0aGlzLmV2ZW50T3B0aW9ucyA9IGRlc2NyaXB0b3IuZXZlbnRPcHRpb25zIHx8IHt9O1xuICAgICAgICB0aGlzLmlkZW50aWZpZXIgPSBkZXNjcmlwdG9yLmlkZW50aWZpZXIgfHwgZXJyb3IoXCJtaXNzaW5nIGlkZW50aWZpZXJcIik7XG4gICAgICAgIHRoaXMubWV0aG9kTmFtZSA9IGRlc2NyaXB0b3IubWV0aG9kTmFtZSB8fCBlcnJvcihcIm1pc3NpbmcgbWV0aG9kIG5hbWVcIik7XG4gICAgfVxuICAgIHN0YXRpYyBmb3JUb2tlbih0b2tlbikge1xuICAgICAgICByZXR1cm4gbmV3IHRoaXModG9rZW4uZWxlbWVudCwgdG9rZW4uaW5kZXgsIHBhcnNlQWN0aW9uRGVzY3JpcHRvclN0cmluZyh0b2tlbi5jb250ZW50KSk7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICBjb25zdCBldmVudE5hbWVTdWZmaXggPSB0aGlzLmV2ZW50VGFyZ2V0TmFtZSA/IGBAJHt0aGlzLmV2ZW50VGFyZ2V0TmFtZX1gIDogXCJcIjtcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuZXZlbnROYW1lfSR7ZXZlbnROYW1lU3VmZml4fS0+JHt0aGlzLmlkZW50aWZpZXJ9IyR7dGhpcy5tZXRob2ROYW1lfWA7XG4gICAgfVxuICAgIGdldCBwYXJhbXMoKSB7XG4gICAgICAgIGlmICh0aGlzLmV2ZW50VGFyZ2V0IGluc3RhbmNlb2YgRWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1zRnJvbUV2ZW50VGFyZ2V0QXR0cmlidXRlcyh0aGlzLmV2ZW50VGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRQYXJhbXNGcm9tRXZlbnRUYXJnZXRBdHRyaWJ1dGVzKGV2ZW50VGFyZ2V0KSB7XG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IHt9O1xuICAgICAgICBjb25zdCBwYXR0ZXJuID0gbmV3IFJlZ0V4cChgXmRhdGEtJHt0aGlzLmlkZW50aWZpZXJ9LSguKyktcGFyYW0kYCk7XG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBBcnJheS5mcm9tKGV2ZW50VGFyZ2V0LmF0dHJpYnV0ZXMpO1xuICAgICAgICBhdHRyaWJ1dGVzLmZvckVhY2goKHsgbmFtZSwgdmFsdWUgfSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSBuYW1lLm1hdGNoKHBhdHRlcm4pO1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gbWF0Y2ggJiYgbWF0Y2hbMV07XG4gICAgICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihwYXJhbXMsIHsgW2NhbWVsaXplKGtleSldOiB0eXBlY2FzdCh2YWx1ZSkgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcGFyYW1zO1xuICAgIH1cbiAgICBnZXQgZXZlbnRUYXJnZXROYW1lKCkge1xuICAgICAgICByZXR1cm4gc3RyaW5naWZ5RXZlbnRUYXJnZXQodGhpcy5ldmVudFRhcmdldCk7XG4gICAgfVxufVxuY29uc3QgZGVmYXVsdEV2ZW50TmFtZXMgPSB7XG4gICAgXCJhXCI6IGUgPT4gXCJjbGlja1wiLFxuICAgIFwiYnV0dG9uXCI6IGUgPT4gXCJjbGlja1wiLFxuICAgIFwiZm9ybVwiOiBlID0+IFwic3VibWl0XCIsXG4gICAgXCJkZXRhaWxzXCI6IGUgPT4gXCJ0b2dnbGVcIixcbiAgICBcImlucHV0XCI6IGUgPT4gZS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpID09IFwic3VibWl0XCIgPyBcImNsaWNrXCIgOiBcImlucHV0XCIsXG4gICAgXCJzZWxlY3RcIjogZSA9PiBcImNoYW5nZVwiLFxuICAgIFwidGV4dGFyZWFcIjogZSA9PiBcImlucHV0XCJcbn07XG5mdW5jdGlvbiBnZXREZWZhdWx0RXZlbnROYW1lRm9yRWxlbWVudChlbGVtZW50KSB7XG4gICAgY29uc3QgdGFnTmFtZSA9IGVsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIGlmICh0YWdOYW1lIGluIGRlZmF1bHRFdmVudE5hbWVzKSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0RXZlbnROYW1lc1t0YWdOYW1lXShlbGVtZW50KTtcbiAgICB9XG59XG5mdW5jdGlvbiBlcnJvcihtZXNzYWdlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xufVxuZnVuY3Rpb24gdHlwZWNhc3QodmFsdWUpIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh2YWx1ZSk7XG4gICAgfVxuICAgIGNhdGNoIChvX08pIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbn1cblxuY2xhc3MgQmluZGluZyB7XG4gICAgY29uc3RydWN0b3IoY29udGV4dCwgYWN0aW9uKSB7XG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgICAgIHRoaXMuYWN0aW9uID0gYWN0aW9uO1xuICAgIH1cbiAgICBnZXQgaW5kZXgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFjdGlvbi5pbmRleDtcbiAgICB9XG4gICAgZ2V0IGV2ZW50VGFyZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hY3Rpb24uZXZlbnRUYXJnZXQ7XG4gICAgfVxuICAgIGdldCBldmVudE9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFjdGlvbi5ldmVudE9wdGlvbnM7XG4gICAgfVxuICAgIGdldCBpZGVudGlmaWVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0LmlkZW50aWZpZXI7XG4gICAgfVxuICAgIGhhbmRsZUV2ZW50KGV2ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLndpbGxCZUludm9rZWRCeUV2ZW50KGV2ZW50KSkge1xuICAgICAgICAgICAgdGhpcy5pbnZva2VXaXRoRXZlbnQoZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBldmVudE5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFjdGlvbi5ldmVudE5hbWU7XG4gICAgfVxuICAgIGdldCBtZXRob2QoKSB7XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9IHRoaXMuY29udHJvbGxlclt0aGlzLm1ldGhvZE5hbWVdO1xuICAgICAgICBpZiAodHlwZW9mIG1ldGhvZCA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBtZXRob2Q7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBBY3Rpb24gXCIke3RoaXMuYWN0aW9ufVwiIHJlZmVyZW5jZXMgdW5kZWZpbmVkIG1ldGhvZCBcIiR7dGhpcy5tZXRob2ROYW1lfVwiYCk7XG4gICAgfVxuICAgIGludm9rZVdpdGhFdmVudChldmVudCkge1xuICAgICAgICBjb25zdCB7IHRhcmdldCwgY3VycmVudFRhcmdldCB9ID0gZXZlbnQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB7IHBhcmFtcyB9ID0gdGhpcy5hY3Rpb247XG4gICAgICAgICAgICBjb25zdCBhY3Rpb25FdmVudCA9IE9iamVjdC5hc3NpZ24oZXZlbnQsIHsgcGFyYW1zIH0pO1xuICAgICAgICAgICAgdGhpcy5tZXRob2QuY2FsbCh0aGlzLmNvbnRyb2xsZXIsIGFjdGlvbkV2ZW50KTtcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5sb2dEZWJ1Z0FjdGl2aXR5KHRoaXMubWV0aG9kTmFtZSwgeyBldmVudCwgdGFyZ2V0LCBjdXJyZW50VGFyZ2V0LCBhY3Rpb246IHRoaXMubWV0aG9kTmFtZSB9KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgaWRlbnRpZmllciwgY29udHJvbGxlciwgZWxlbWVudCwgaW5kZXggfSA9IHRoaXM7XG4gICAgICAgICAgICBjb25zdCBkZXRhaWwgPSB7IGlkZW50aWZpZXIsIGNvbnRyb2xsZXIsIGVsZW1lbnQsIGluZGV4LCBldmVudCB9O1xuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmhhbmRsZUVycm9yKGVycm9yLCBgaW52b2tpbmcgYWN0aW9uIFwiJHt0aGlzLmFjdGlvbn1cImAsIGRldGFpbCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgd2lsbEJlSW52b2tlZEJ5RXZlbnQoZXZlbnQpIHtcbiAgICAgICAgY29uc3QgZXZlbnRUYXJnZXQgPSBldmVudC50YXJnZXQ7XG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnQgPT09IGV2ZW50VGFyZ2V0KSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChldmVudFRhcmdldCBpbnN0YW5jZW9mIEVsZW1lbnQgJiYgdGhpcy5lbGVtZW50LmNvbnRhaW5zKGV2ZW50VGFyZ2V0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2NvcGUuY29udGFpbnNFbGVtZW50KGV2ZW50VGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNjb3BlLmNvbnRhaW5zRWxlbWVudCh0aGlzLmFjdGlvbi5lbGVtZW50KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgY29udHJvbGxlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dC5jb250cm9sbGVyO1xuICAgIH1cbiAgICBnZXQgbWV0aG9kTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWN0aW9uLm1ldGhvZE5hbWU7XG4gICAgfVxuICAgIGdldCBlbGVtZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zY29wZS5lbGVtZW50O1xuICAgIH1cbiAgICBnZXQgc2NvcGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRleHQuc2NvcGU7XG4gICAgfVxufVxuXG5jbGFzcyBFbGVtZW50T2JzZXJ2ZXIge1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGRlbGVnYXRlKSB7XG4gICAgICAgIHRoaXMubXV0YXRpb25PYnNlcnZlckluaXQgPSB7IGF0dHJpYnV0ZXM6IHRydWUsIGNoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZSB9O1xuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICB0aGlzLnN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5kZWxlZ2F0ZSA9IGRlbGVnYXRlO1xuICAgICAgICB0aGlzLmVsZW1lbnRzID0gbmV3IFNldDtcbiAgICAgICAgdGhpcy5tdXRhdGlvbk9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKG11dGF0aW9ucykgPT4gdGhpcy5wcm9jZXNzTXV0YXRpb25zKG11dGF0aW9ucykpO1xuICAgIH1cbiAgICBzdGFydCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnN0YXJ0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLm11dGF0aW9uT2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLmVsZW1lbnQsIHRoaXMubXV0YXRpb25PYnNlcnZlckluaXQpO1xuICAgICAgICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcGF1c2UoY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhcnRlZCkge1xuICAgICAgICAgICAgdGhpcy5tdXRhdGlvbk9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIGlmICghdGhpcy5zdGFydGVkKSB7XG4gICAgICAgICAgICB0aGlzLm11dGF0aW9uT2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLmVsZW1lbnQsIHRoaXMubXV0YXRpb25PYnNlcnZlckluaXQpO1xuICAgICAgICAgICAgdGhpcy5zdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdG9wKCkge1xuICAgICAgICBpZiAodGhpcy5zdGFydGVkKSB7XG4gICAgICAgICAgICB0aGlzLm11dGF0aW9uT2JzZXJ2ZXIudGFrZVJlY29yZHMoKTtcbiAgICAgICAgICAgIHRoaXMubXV0YXRpb25PYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZWZyZXNoKCkge1xuICAgICAgICBpZiAodGhpcy5zdGFydGVkKSB7XG4gICAgICAgICAgICBjb25zdCBtYXRjaGVzID0gbmV3IFNldCh0aGlzLm1hdGNoRWxlbWVudHNJblRyZWUoKSk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgQXJyYXkuZnJvbSh0aGlzLmVsZW1lbnRzKSkge1xuICAgICAgICAgICAgICAgIGlmICghbWF0Y2hlcy5oYXMoZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVFbGVtZW50KGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBBcnJheS5mcm9tKG1hdGNoZXMpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRFbGVtZW50KGVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHByb2Nlc3NNdXRhdGlvbnMobXV0YXRpb25zKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXJ0ZWQpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbXV0YXRpb24gb2YgbXV0YXRpb25zKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9jZXNzTXV0YXRpb24obXV0YXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHByb2Nlc3NNdXRhdGlvbihtdXRhdGlvbikge1xuICAgICAgICBpZiAobXV0YXRpb24udHlwZSA9PSBcImF0dHJpYnV0ZXNcIikge1xuICAgICAgICAgICAgdGhpcy5wcm9jZXNzQXR0cmlidXRlQ2hhbmdlKG11dGF0aW9uLnRhcmdldCwgbXV0YXRpb24uYXR0cmlidXRlTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobXV0YXRpb24udHlwZSA9PSBcImNoaWxkTGlzdFwiKSB7XG4gICAgICAgICAgICB0aGlzLnByb2Nlc3NSZW1vdmVkTm9kZXMobXV0YXRpb24ucmVtb3ZlZE5vZGVzKTtcbiAgICAgICAgICAgIHRoaXMucHJvY2Vzc0FkZGVkTm9kZXMobXV0YXRpb24uYWRkZWROb2Rlcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHJvY2Vzc0F0dHJpYnV0ZUNoYW5nZShub2RlLCBhdHRyaWJ1dGVOYW1lKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBub2RlO1xuICAgICAgICBpZiAodGhpcy5lbGVtZW50cy5oYXMoZWxlbWVudCkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmRlbGVnYXRlLmVsZW1lbnRBdHRyaWJ1dGVDaGFuZ2VkICYmIHRoaXMubWF0Y2hFbGVtZW50KGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZWxlZ2F0ZS5lbGVtZW50QXR0cmlidXRlQ2hhbmdlZChlbGVtZW50LCBhdHRyaWJ1dGVOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlRWxlbWVudChlbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLm1hdGNoRWxlbWVudChlbGVtZW50KSkge1xuICAgICAgICAgICAgdGhpcy5hZGRFbGVtZW50KGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHByb2Nlc3NSZW1vdmVkTm9kZXMobm9kZXMpIHtcbiAgICAgICAgZm9yIChjb25zdCBub2RlIG9mIEFycmF5LmZyb20obm9kZXMpKSB7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5lbGVtZW50RnJvbU5vZGUobm9kZSk7XG4gICAgICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvY2Vzc1RyZWUoZWxlbWVudCwgdGhpcy5yZW1vdmVFbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBwcm9jZXNzQWRkZWROb2Rlcyhub2Rlcykge1xuICAgICAgICBmb3IgKGNvbnN0IG5vZGUgb2YgQXJyYXkuZnJvbShub2RlcykpIHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLmVsZW1lbnRGcm9tTm9kZShub2RlKTtcbiAgICAgICAgICAgIGlmIChlbGVtZW50ICYmIHRoaXMuZWxlbWVudElzQWN0aXZlKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9jZXNzVHJlZShlbGVtZW50LCB0aGlzLmFkZEVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIG1hdGNoRWxlbWVudChlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRlbGVnYXRlLm1hdGNoRWxlbWVudChlbGVtZW50KTtcbiAgICB9XG4gICAgbWF0Y2hFbGVtZW50c0luVHJlZSh0cmVlID0gdGhpcy5lbGVtZW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRlbGVnYXRlLm1hdGNoRWxlbWVudHNJblRyZWUodHJlZSk7XG4gICAgfVxuICAgIHByb2Nlc3NUcmVlKHRyZWUsIHByb2Nlc3Nvcikge1xuICAgICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgdGhpcy5tYXRjaEVsZW1lbnRzSW5UcmVlKHRyZWUpKSB7XG4gICAgICAgICAgICBwcm9jZXNzb3IuY2FsbCh0aGlzLCBlbGVtZW50KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbGVtZW50RnJvbU5vZGUobm9kZSkge1xuICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xuICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxlbWVudElzQWN0aXZlKGVsZW1lbnQpIHtcbiAgICAgICAgaWYgKGVsZW1lbnQuaXNDb25uZWN0ZWQgIT0gdGhpcy5lbGVtZW50LmlzQ29ubmVjdGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50LmNvbnRhaW5zKGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFkZEVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgICBpZiAoIXRoaXMuZWxlbWVudHMuaGFzKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5lbGVtZW50SXNBY3RpdmUoZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRzLmFkZChlbGVtZW50KTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kZWxlZ2F0ZS5lbGVtZW50TWF0Y2hlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlbGVnYXRlLmVsZW1lbnRNYXRjaGVkKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZW1vdmVFbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuZWxlbWVudHMuaGFzKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRzLmRlbGV0ZShlbGVtZW50KTtcbiAgICAgICAgICAgIGlmICh0aGlzLmRlbGVnYXRlLmVsZW1lbnRVbm1hdGNoZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlbGVnYXRlLmVsZW1lbnRVbm1hdGNoZWQoZWxlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNsYXNzIEF0dHJpYnV0ZU9ic2VydmVyIHtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50LCBhdHRyaWJ1dGVOYW1lLCBkZWxlZ2F0ZSkge1xuICAgICAgICB0aGlzLmF0dHJpYnV0ZU5hbWUgPSBhdHRyaWJ1dGVOYW1lO1xuICAgICAgICB0aGlzLmRlbGVnYXRlID0gZGVsZWdhdGU7XG4gICAgICAgIHRoaXMuZWxlbWVudE9ic2VydmVyID0gbmV3IEVsZW1lbnRPYnNlcnZlcihlbGVtZW50LCB0aGlzKTtcbiAgICB9XG4gICAgZ2V0IGVsZW1lbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnRPYnNlcnZlci5lbGVtZW50O1xuICAgIH1cbiAgICBnZXQgc2VsZWN0b3IoKSB7XG4gICAgICAgIHJldHVybiBgWyR7dGhpcy5hdHRyaWJ1dGVOYW1lfV1gO1xuICAgIH1cbiAgICBzdGFydCgpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50T2JzZXJ2ZXIuc3RhcnQoKTtcbiAgICB9XG4gICAgcGF1c2UoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5lbGVtZW50T2JzZXJ2ZXIucGF1c2UoY2FsbGJhY2spO1xuICAgIH1cbiAgICBzdG9wKCkge1xuICAgICAgICB0aGlzLmVsZW1lbnRPYnNlcnZlci5zdG9wKCk7XG4gICAgfVxuICAgIHJlZnJlc2goKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudE9ic2VydmVyLnJlZnJlc2goKTtcbiAgICB9XG4gICAgZ2V0IHN0YXJ0ZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnRPYnNlcnZlci5zdGFydGVkO1xuICAgIH1cbiAgICBtYXRjaEVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gZWxlbWVudC5oYXNBdHRyaWJ1dGUodGhpcy5hdHRyaWJ1dGVOYW1lKTtcbiAgICB9XG4gICAgbWF0Y2hFbGVtZW50c0luVHJlZSh0cmVlKSB7XG4gICAgICAgIGNvbnN0IG1hdGNoID0gdGhpcy5tYXRjaEVsZW1lbnQodHJlZSkgPyBbdHJlZV0gOiBbXTtcbiAgICAgICAgY29uc3QgbWF0Y2hlcyA9IEFycmF5LmZyb20odHJlZS5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuc2VsZWN0b3IpKTtcbiAgICAgICAgcmV0dXJuIG1hdGNoLmNvbmNhdChtYXRjaGVzKTtcbiAgICB9XG4gICAgZWxlbWVudE1hdGNoZWQoZWxlbWVudCkge1xuICAgICAgICBpZiAodGhpcy5kZWxlZ2F0ZS5lbGVtZW50TWF0Y2hlZEF0dHJpYnV0ZSkge1xuICAgICAgICAgICAgdGhpcy5kZWxlZ2F0ZS5lbGVtZW50TWF0Y2hlZEF0dHJpYnV0ZShlbGVtZW50LCB0aGlzLmF0dHJpYnV0ZU5hbWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsZW1lbnRVbm1hdGNoZWQoZWxlbWVudCkge1xuICAgICAgICBpZiAodGhpcy5kZWxlZ2F0ZS5lbGVtZW50VW5tYXRjaGVkQXR0cmlidXRlKSB7XG4gICAgICAgICAgICB0aGlzLmRlbGVnYXRlLmVsZW1lbnRVbm1hdGNoZWRBdHRyaWJ1dGUoZWxlbWVudCwgdGhpcy5hdHRyaWJ1dGVOYW1lKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbGVtZW50QXR0cmlidXRlQ2hhbmdlZChlbGVtZW50LCBhdHRyaWJ1dGVOYW1lKSB7XG4gICAgICAgIGlmICh0aGlzLmRlbGVnYXRlLmVsZW1lbnRBdHRyaWJ1dGVWYWx1ZUNoYW5nZWQgJiYgdGhpcy5hdHRyaWJ1dGVOYW1lID09IGF0dHJpYnV0ZU5hbWUpIHtcbiAgICAgICAgICAgIHRoaXMuZGVsZWdhdGUuZWxlbWVudEF0dHJpYnV0ZVZhbHVlQ2hhbmdlZChlbGVtZW50LCBhdHRyaWJ1dGVOYW1lKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuY2xhc3MgU3RyaW5nTWFwT2JzZXJ2ZXIge1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGRlbGVnYXRlKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgIHRoaXMuZGVsZWdhdGUgPSBkZWxlZ2F0ZTtcbiAgICAgICAgdGhpcy5zdGFydGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc3RyaW5nTWFwID0gbmV3IE1hcDtcbiAgICAgICAgdGhpcy5tdXRhdGlvbk9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIobXV0YXRpb25zID0+IHRoaXMucHJvY2Vzc011dGF0aW9ucyhtdXRhdGlvbnMpKTtcbiAgICB9XG4gICAgc3RhcnQoKSB7XG4gICAgICAgIGlmICghdGhpcy5zdGFydGVkKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5tdXRhdGlvbk9ic2VydmVyLm9ic2VydmUodGhpcy5lbGVtZW50LCB7IGF0dHJpYnV0ZXM6IHRydWUsIGF0dHJpYnV0ZU9sZFZhbHVlOiB0cnVlIH0pO1xuICAgICAgICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RvcCgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhcnRlZCkge1xuICAgICAgICAgICAgdGhpcy5tdXRhdGlvbk9ic2VydmVyLnRha2VSZWNvcmRzKCk7XG4gICAgICAgICAgICB0aGlzLm11dGF0aW9uT2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgdGhpcy5zdGFydGVkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVmcmVzaCgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhcnRlZCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBhdHRyaWJ1dGVOYW1lIG9mIHRoaXMua25vd25BdHRyaWJ1dGVOYW1lcykge1xuICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lLCBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBwcm9jZXNzTXV0YXRpb25zKG11dGF0aW9ucykge1xuICAgICAgICBpZiAodGhpcy5zdGFydGVkKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG11dGF0aW9uIG9mIG11dGF0aW9ucykge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvY2Vzc011dGF0aW9uKG11dGF0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBwcm9jZXNzTXV0YXRpb24obXV0YXRpb24pIHtcbiAgICAgICAgY29uc3QgYXR0cmlidXRlTmFtZSA9IG11dGF0aW9uLmF0dHJpYnV0ZU5hbWU7XG4gICAgICAgIGlmIChhdHRyaWJ1dGVOYW1lKSB7XG4gICAgICAgICAgICB0aGlzLnJlZnJlc2hBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSwgbXV0YXRpb24ub2xkVmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlZnJlc2hBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5kZWxlZ2F0ZS5nZXRTdHJpbmdNYXBLZXlGb3JBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSk7XG4gICAgICAgIGlmIChrZXkgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnN0cmluZ01hcC5oYXMoYXR0cmlidXRlTmFtZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0cmluZ01hcEtleUFkZGVkKGtleSwgYXR0cmlidXRlTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSk7XG4gICAgICAgICAgICBpZiAodGhpcy5zdHJpbmdNYXAuZ2V0KGF0dHJpYnV0ZU5hbWUpICE9IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdHJpbmdNYXBWYWx1ZUNoYW5nZWQodmFsdWUsIGtleSwgb2xkVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBvbGRWYWx1ZSA9IHRoaXMuc3RyaW5nTWFwLmdldChhdHRyaWJ1dGVOYW1lKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0cmluZ01hcC5kZWxldGUoYXR0cmlidXRlTmFtZSk7XG4gICAgICAgICAgICAgICAgaWYgKG9sZFZhbHVlKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0cmluZ01hcEtleVJlbW92ZWQoa2V5LCBhdHRyaWJ1dGVOYW1lLCBvbGRWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0cmluZ01hcC5zZXQoYXR0cmlidXRlTmFtZSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHN0cmluZ01hcEtleUFkZGVkKGtleSwgYXR0cmlidXRlTmFtZSkge1xuICAgICAgICBpZiAodGhpcy5kZWxlZ2F0ZS5zdHJpbmdNYXBLZXlBZGRlZCkge1xuICAgICAgICAgICAgdGhpcy5kZWxlZ2F0ZS5zdHJpbmdNYXBLZXlBZGRlZChrZXksIGF0dHJpYnV0ZU5hbWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0cmluZ01hcFZhbHVlQ2hhbmdlZCh2YWx1ZSwga2V5LCBvbGRWYWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5kZWxlZ2F0ZS5zdHJpbmdNYXBWYWx1ZUNoYW5nZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZGVsZWdhdGUuc3RyaW5nTWFwVmFsdWVDaGFuZ2VkKHZhbHVlLCBrZXksIG9sZFZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdHJpbmdNYXBLZXlSZW1vdmVkKGtleSwgYXR0cmlidXRlTmFtZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuZGVsZWdhdGUuc3RyaW5nTWFwS2V5UmVtb3ZlZCkge1xuICAgICAgICAgICAgdGhpcy5kZWxlZ2F0ZS5zdHJpbmdNYXBLZXlSZW1vdmVkKGtleSwgYXR0cmlidXRlTmFtZSwgb2xkVmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBrbm93bkF0dHJpYnV0ZU5hbWVzKCkge1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShuZXcgU2V0KHRoaXMuY3VycmVudEF0dHJpYnV0ZU5hbWVzLmNvbmNhdCh0aGlzLnJlY29yZGVkQXR0cmlidXRlTmFtZXMpKSk7XG4gICAgfVxuICAgIGdldCBjdXJyZW50QXR0cmlidXRlTmFtZXMoKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuZWxlbWVudC5hdHRyaWJ1dGVzKS5tYXAoYXR0cmlidXRlID0+IGF0dHJpYnV0ZS5uYW1lKTtcbiAgICB9XG4gICAgZ2V0IHJlY29yZGVkQXR0cmlidXRlTmFtZXMoKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuc3RyaW5nTWFwLmtleXMoKSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBhZGQobWFwLCBrZXksIHZhbHVlKSB7XG4gICAgZmV0Y2gobWFwLCBrZXkpLmFkZCh2YWx1ZSk7XG59XG5mdW5jdGlvbiBkZWwobWFwLCBrZXksIHZhbHVlKSB7XG4gICAgZmV0Y2gobWFwLCBrZXkpLmRlbGV0ZSh2YWx1ZSk7XG4gICAgcHJ1bmUobWFwLCBrZXkpO1xufVxuZnVuY3Rpb24gZmV0Y2gobWFwLCBrZXkpIHtcbiAgICBsZXQgdmFsdWVzID0gbWFwLmdldChrZXkpO1xuICAgIGlmICghdmFsdWVzKSB7XG4gICAgICAgIHZhbHVlcyA9IG5ldyBTZXQoKTtcbiAgICAgICAgbWFwLnNldChrZXksIHZhbHVlcyk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZXM7XG59XG5mdW5jdGlvbiBwcnVuZShtYXAsIGtleSkge1xuICAgIGNvbnN0IHZhbHVlcyA9IG1hcC5nZXQoa2V5KTtcbiAgICBpZiAodmFsdWVzICE9IG51bGwgJiYgdmFsdWVzLnNpemUgPT0gMCkge1xuICAgICAgICBtYXAuZGVsZXRlKGtleSk7XG4gICAgfVxufVxuXG5jbGFzcyBNdWx0aW1hcCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMudmFsdWVzQnlLZXkgPSBuZXcgTWFwKCk7XG4gICAgfVxuICAgIGdldCBrZXlzKCkge1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLnZhbHVlc0J5S2V5LmtleXMoKSk7XG4gICAgfVxuICAgIGdldCB2YWx1ZXMoKSB7XG4gICAgICAgIGNvbnN0IHNldHMgPSBBcnJheS5mcm9tKHRoaXMudmFsdWVzQnlLZXkudmFsdWVzKCkpO1xuICAgICAgICByZXR1cm4gc2V0cy5yZWR1Y2UoKHZhbHVlcywgc2V0KSA9PiB2YWx1ZXMuY29uY2F0KEFycmF5LmZyb20oc2V0KSksIFtdKTtcbiAgICB9XG4gICAgZ2V0IHNpemUoKSB7XG4gICAgICAgIGNvbnN0IHNldHMgPSBBcnJheS5mcm9tKHRoaXMudmFsdWVzQnlLZXkudmFsdWVzKCkpO1xuICAgICAgICByZXR1cm4gc2V0cy5yZWR1Y2UoKHNpemUsIHNldCkgPT4gc2l6ZSArIHNldC5zaXplLCAwKTtcbiAgICB9XG4gICAgYWRkKGtleSwgdmFsdWUpIHtcbiAgICAgICAgYWRkKHRoaXMudmFsdWVzQnlLZXksIGtleSwgdmFsdWUpO1xuICAgIH1cbiAgICBkZWxldGUoa2V5LCB2YWx1ZSkge1xuICAgICAgICBkZWwodGhpcy52YWx1ZXNCeUtleSwga2V5LCB2YWx1ZSk7XG4gICAgfVxuICAgIGhhcyhrZXksIHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlcyA9IHRoaXMudmFsdWVzQnlLZXkuZ2V0KGtleSk7XG4gICAgICAgIHJldHVybiB2YWx1ZXMgIT0gbnVsbCAmJiB2YWx1ZXMuaGFzKHZhbHVlKTtcbiAgICB9XG4gICAgaGFzS2V5KGtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZXNCeUtleS5oYXMoa2V5KTtcbiAgICB9XG4gICAgaGFzVmFsdWUodmFsdWUpIHtcbiAgICAgICAgY29uc3Qgc2V0cyA9IEFycmF5LmZyb20odGhpcy52YWx1ZXNCeUtleS52YWx1ZXMoKSk7XG4gICAgICAgIHJldHVybiBzZXRzLnNvbWUoc2V0ID0+IHNldC5oYXModmFsdWUpKTtcbiAgICB9XG4gICAgZ2V0VmFsdWVzRm9yS2V5KGtleSkge1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSB0aGlzLnZhbHVlc0J5S2V5LmdldChrZXkpO1xuICAgICAgICByZXR1cm4gdmFsdWVzID8gQXJyYXkuZnJvbSh2YWx1ZXMpIDogW107XG4gICAgfVxuICAgIGdldEtleXNGb3JWYWx1ZSh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLnZhbHVlc0J5S2V5KVxuICAgICAgICAgICAgLmZpbHRlcigoW2tleSwgdmFsdWVzXSkgPT4gdmFsdWVzLmhhcyh2YWx1ZSkpXG4gICAgICAgICAgICAubWFwKChba2V5LCB2YWx1ZXNdKSA9PiBrZXkpO1xuICAgIH1cbn1cblxuY2xhc3MgSW5kZXhlZE11bHRpbWFwIGV4dGVuZHMgTXVsdGltYXAge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmtleXNCeVZhbHVlID0gbmV3IE1hcDtcbiAgICB9XG4gICAgZ2V0IHZhbHVlcygpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5rZXlzQnlWYWx1ZS5rZXlzKCkpO1xuICAgIH1cbiAgICBhZGQoa2V5LCB2YWx1ZSkge1xuICAgICAgICBzdXBlci5hZGQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIGFkZCh0aGlzLmtleXNCeVZhbHVlLCB2YWx1ZSwga2V5KTtcbiAgICB9XG4gICAgZGVsZXRlKGtleSwgdmFsdWUpIHtcbiAgICAgICAgc3VwZXIuZGVsZXRlKGtleSwgdmFsdWUpO1xuICAgICAgICBkZWwodGhpcy5rZXlzQnlWYWx1ZSwgdmFsdWUsIGtleSk7XG4gICAgfVxuICAgIGhhc1ZhbHVlKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmtleXNCeVZhbHVlLmhhcyh2YWx1ZSk7XG4gICAgfVxuICAgIGdldEtleXNGb3JWYWx1ZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCBzZXQgPSB0aGlzLmtleXNCeVZhbHVlLmdldCh2YWx1ZSk7XG4gICAgICAgIHJldHVybiBzZXQgPyBBcnJheS5mcm9tKHNldCkgOiBbXTtcbiAgICB9XG59XG5cbmNsYXNzIFRva2VuTGlzdE9ic2VydmVyIHtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50LCBhdHRyaWJ1dGVOYW1lLCBkZWxlZ2F0ZSkge1xuICAgICAgICB0aGlzLmF0dHJpYnV0ZU9ic2VydmVyID0gbmV3IEF0dHJpYnV0ZU9ic2VydmVyKGVsZW1lbnQsIGF0dHJpYnV0ZU5hbWUsIHRoaXMpO1xuICAgICAgICB0aGlzLmRlbGVnYXRlID0gZGVsZWdhdGU7XG4gICAgICAgIHRoaXMudG9rZW5zQnlFbGVtZW50ID0gbmV3IE11bHRpbWFwO1xuICAgIH1cbiAgICBnZXQgc3RhcnRlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlT2JzZXJ2ZXIuc3RhcnRlZDtcbiAgICB9XG4gICAgc3RhcnQoKSB7XG4gICAgICAgIHRoaXMuYXR0cmlidXRlT2JzZXJ2ZXIuc3RhcnQoKTtcbiAgICB9XG4gICAgcGF1c2UoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVPYnNlcnZlci5wYXVzZShjYWxsYmFjayk7XG4gICAgfVxuICAgIHN0b3AoKSB7XG4gICAgICAgIHRoaXMuYXR0cmlidXRlT2JzZXJ2ZXIuc3RvcCgpO1xuICAgIH1cbiAgICByZWZyZXNoKCkge1xuICAgICAgICB0aGlzLmF0dHJpYnV0ZU9ic2VydmVyLnJlZnJlc2goKTtcbiAgICB9XG4gICAgZ2V0IGVsZW1lbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZU9ic2VydmVyLmVsZW1lbnQ7XG4gICAgfVxuICAgIGdldCBhdHRyaWJ1dGVOYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVPYnNlcnZlci5hdHRyaWJ1dGVOYW1lO1xuICAgIH1cbiAgICBlbGVtZW50TWF0Y2hlZEF0dHJpYnV0ZShlbGVtZW50KSB7XG4gICAgICAgIHRoaXMudG9rZW5zTWF0Y2hlZCh0aGlzLnJlYWRUb2tlbnNGb3JFbGVtZW50KGVsZW1lbnQpKTtcbiAgICB9XG4gICAgZWxlbWVudEF0dHJpYnV0ZVZhbHVlQ2hhbmdlZChlbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IFt1bm1hdGNoZWRUb2tlbnMsIG1hdGNoZWRUb2tlbnNdID0gdGhpcy5yZWZyZXNoVG9rZW5zRm9yRWxlbWVudChlbGVtZW50KTtcbiAgICAgICAgdGhpcy50b2tlbnNVbm1hdGNoZWQodW5tYXRjaGVkVG9rZW5zKTtcbiAgICAgICAgdGhpcy50b2tlbnNNYXRjaGVkKG1hdGNoZWRUb2tlbnMpO1xuICAgIH1cbiAgICBlbGVtZW50VW5tYXRjaGVkQXR0cmlidXRlKGVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy50b2tlbnNVbm1hdGNoZWQodGhpcy50b2tlbnNCeUVsZW1lbnQuZ2V0VmFsdWVzRm9yS2V5KGVsZW1lbnQpKTtcbiAgICB9XG4gICAgdG9rZW5zTWF0Y2hlZCh0b2tlbnMpIHtcbiAgICAgICAgdG9rZW5zLmZvckVhY2godG9rZW4gPT4gdGhpcy50b2tlbk1hdGNoZWQodG9rZW4pKTtcbiAgICB9XG4gICAgdG9rZW5zVW5tYXRjaGVkKHRva2Vucykge1xuICAgICAgICB0b2tlbnMuZm9yRWFjaCh0b2tlbiA9PiB0aGlzLnRva2VuVW5tYXRjaGVkKHRva2VuKSk7XG4gICAgfVxuICAgIHRva2VuTWF0Y2hlZCh0b2tlbikge1xuICAgICAgICB0aGlzLmRlbGVnYXRlLnRva2VuTWF0Y2hlZCh0b2tlbik7XG4gICAgICAgIHRoaXMudG9rZW5zQnlFbGVtZW50LmFkZCh0b2tlbi5lbGVtZW50LCB0b2tlbik7XG4gICAgfVxuICAgIHRva2VuVW5tYXRjaGVkKHRva2VuKSB7XG4gICAgICAgIHRoaXMuZGVsZWdhdGUudG9rZW5Vbm1hdGNoZWQodG9rZW4pO1xuICAgICAgICB0aGlzLnRva2Vuc0J5RWxlbWVudC5kZWxldGUodG9rZW4uZWxlbWVudCwgdG9rZW4pO1xuICAgIH1cbiAgICByZWZyZXNoVG9rZW5zRm9yRWxlbWVudChlbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IHByZXZpb3VzVG9rZW5zID0gdGhpcy50b2tlbnNCeUVsZW1lbnQuZ2V0VmFsdWVzRm9yS2V5KGVsZW1lbnQpO1xuICAgICAgICBjb25zdCBjdXJyZW50VG9rZW5zID0gdGhpcy5yZWFkVG9rZW5zRm9yRWxlbWVudChlbGVtZW50KTtcbiAgICAgICAgY29uc3QgZmlyc3REaWZmZXJpbmdJbmRleCA9IHppcChwcmV2aW91c1Rva2VucywgY3VycmVudFRva2VucylcbiAgICAgICAgICAgIC5maW5kSW5kZXgoKFtwcmV2aW91c1Rva2VuLCBjdXJyZW50VG9rZW5dKSA9PiAhdG9rZW5zQXJlRXF1YWwocHJldmlvdXNUb2tlbiwgY3VycmVudFRva2VuKSk7XG4gICAgICAgIGlmIChmaXJzdERpZmZlcmluZ0luZGV4ID09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gW1tdLCBbXV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gW3ByZXZpb3VzVG9rZW5zLnNsaWNlKGZpcnN0RGlmZmVyaW5nSW5kZXgpLCBjdXJyZW50VG9rZW5zLnNsaWNlKGZpcnN0RGlmZmVyaW5nSW5kZXgpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZWFkVG9rZW5zRm9yRWxlbWVudChlbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZU5hbWUgPSB0aGlzLmF0dHJpYnV0ZU5hbWU7XG4gICAgICAgIGNvbnN0IHRva2VuU3RyaW5nID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSkgfHwgXCJcIjtcbiAgICAgICAgcmV0dXJuIHBhcnNlVG9rZW5TdHJpbmcodG9rZW5TdHJpbmcsIGVsZW1lbnQsIGF0dHJpYnV0ZU5hbWUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHBhcnNlVG9rZW5TdHJpbmcodG9rZW5TdHJpbmcsIGVsZW1lbnQsIGF0dHJpYnV0ZU5hbWUpIHtcbiAgICByZXR1cm4gdG9rZW5TdHJpbmcudHJpbSgpLnNwbGl0KC9cXHMrLykuZmlsdGVyKGNvbnRlbnQgPT4gY29udGVudC5sZW5ndGgpXG4gICAgICAgIC5tYXAoKGNvbnRlbnQsIGluZGV4KSA9PiAoeyBlbGVtZW50LCBhdHRyaWJ1dGVOYW1lLCBjb250ZW50LCBpbmRleCB9KSk7XG59XG5mdW5jdGlvbiB6aXAobGVmdCwgcmlnaHQpIHtcbiAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1heChsZWZ0Lmxlbmd0aCwgcmlnaHQubGVuZ3RoKTtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh7IGxlbmd0aCB9LCAoXywgaW5kZXgpID0+IFtsZWZ0W2luZGV4XSwgcmlnaHRbaW5kZXhdXSk7XG59XG5mdW5jdGlvbiB0b2tlbnNBcmVFcXVhbChsZWZ0LCByaWdodCkge1xuICAgIHJldHVybiBsZWZ0ICYmIHJpZ2h0ICYmIGxlZnQuaW5kZXggPT0gcmlnaHQuaW5kZXggJiYgbGVmdC5jb250ZW50ID09IHJpZ2h0LmNvbnRlbnQ7XG59XG5cbmNsYXNzIFZhbHVlTGlzdE9ic2VydmVyIHtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50LCBhdHRyaWJ1dGVOYW1lLCBkZWxlZ2F0ZSkge1xuICAgICAgICB0aGlzLnRva2VuTGlzdE9ic2VydmVyID0gbmV3IFRva2VuTGlzdE9ic2VydmVyKGVsZW1lbnQsIGF0dHJpYnV0ZU5hbWUsIHRoaXMpO1xuICAgICAgICB0aGlzLmRlbGVnYXRlID0gZGVsZWdhdGU7XG4gICAgICAgIHRoaXMucGFyc2VSZXN1bHRzQnlUb2tlbiA9IG5ldyBXZWFrTWFwO1xuICAgICAgICB0aGlzLnZhbHVlc0J5VG9rZW5CeUVsZW1lbnQgPSBuZXcgV2Vha01hcDtcbiAgICB9XG4gICAgZ2V0IHN0YXJ0ZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRva2VuTGlzdE9ic2VydmVyLnN0YXJ0ZWQ7XG4gICAgfVxuICAgIHN0YXJ0KCkge1xuICAgICAgICB0aGlzLnRva2VuTGlzdE9ic2VydmVyLnN0YXJ0KCk7XG4gICAgfVxuICAgIHN0b3AoKSB7XG4gICAgICAgIHRoaXMudG9rZW5MaXN0T2JzZXJ2ZXIuc3RvcCgpO1xuICAgIH1cbiAgICByZWZyZXNoKCkge1xuICAgICAgICB0aGlzLnRva2VuTGlzdE9ic2VydmVyLnJlZnJlc2goKTtcbiAgICB9XG4gICAgZ2V0IGVsZW1lbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRva2VuTGlzdE9ic2VydmVyLmVsZW1lbnQ7XG4gICAgfVxuICAgIGdldCBhdHRyaWJ1dGVOYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50b2tlbkxpc3RPYnNlcnZlci5hdHRyaWJ1dGVOYW1lO1xuICAgIH1cbiAgICB0b2tlbk1hdGNoZWQodG9rZW4pIHtcbiAgICAgICAgY29uc3QgeyBlbGVtZW50IH0gPSB0b2tlbjtcbiAgICAgICAgY29uc3QgeyB2YWx1ZSB9ID0gdGhpcy5mZXRjaFBhcnNlUmVzdWx0Rm9yVG9rZW4odG9rZW4pO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuZmV0Y2hWYWx1ZXNCeVRva2VuRm9yRWxlbWVudChlbGVtZW50KS5zZXQodG9rZW4sIHZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMuZGVsZWdhdGUuZWxlbWVudE1hdGNoZWRWYWx1ZShlbGVtZW50LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdG9rZW5Vbm1hdGNoZWQodG9rZW4pIHtcbiAgICAgICAgY29uc3QgeyBlbGVtZW50IH0gPSB0b2tlbjtcbiAgICAgICAgY29uc3QgeyB2YWx1ZSB9ID0gdGhpcy5mZXRjaFBhcnNlUmVzdWx0Rm9yVG9rZW4odG9rZW4pO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuZmV0Y2hWYWx1ZXNCeVRva2VuRm9yRWxlbWVudChlbGVtZW50KS5kZWxldGUodG9rZW4pO1xuICAgICAgICAgICAgdGhpcy5kZWxlZ2F0ZS5lbGVtZW50VW5tYXRjaGVkVmFsdWUoZWxlbWVudCwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZldGNoUGFyc2VSZXN1bHRGb3JUb2tlbih0b2tlbikge1xuICAgICAgICBsZXQgcGFyc2VSZXN1bHQgPSB0aGlzLnBhcnNlUmVzdWx0c0J5VG9rZW4uZ2V0KHRva2VuKTtcbiAgICAgICAgaWYgKCFwYXJzZVJlc3VsdCkge1xuICAgICAgICAgICAgcGFyc2VSZXN1bHQgPSB0aGlzLnBhcnNlVG9rZW4odG9rZW4pO1xuICAgICAgICAgICAgdGhpcy5wYXJzZVJlc3VsdHNCeVRva2VuLnNldCh0b2tlbiwgcGFyc2VSZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZVJlc3VsdDtcbiAgICB9XG4gICAgZmV0Y2hWYWx1ZXNCeVRva2VuRm9yRWxlbWVudChlbGVtZW50KSB7XG4gICAgICAgIGxldCB2YWx1ZXNCeVRva2VuID0gdGhpcy52YWx1ZXNCeVRva2VuQnlFbGVtZW50LmdldChlbGVtZW50KTtcbiAgICAgICAgaWYgKCF2YWx1ZXNCeVRva2VuKSB7XG4gICAgICAgICAgICB2YWx1ZXNCeVRva2VuID0gbmV3IE1hcDtcbiAgICAgICAgICAgIHRoaXMudmFsdWVzQnlUb2tlbkJ5RWxlbWVudC5zZXQoZWxlbWVudCwgdmFsdWVzQnlUb2tlbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlc0J5VG9rZW47XG4gICAgfVxuICAgIHBhcnNlVG9rZW4odG9rZW4pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5kZWxlZ2F0ZS5wYXJzZVZhbHVlRm9yVG9rZW4odG9rZW4pO1xuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWUgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiB7IGVycm9yIH07XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNsYXNzIEJpbmRpbmdPYnNlcnZlciB7XG4gICAgY29uc3RydWN0b3IoY29udGV4dCwgZGVsZWdhdGUpIHtcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgdGhpcy5kZWxlZ2F0ZSA9IGRlbGVnYXRlO1xuICAgICAgICB0aGlzLmJpbmRpbmdzQnlBY3Rpb24gPSBuZXcgTWFwO1xuICAgIH1cbiAgICBzdGFydCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnZhbHVlTGlzdE9ic2VydmVyKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlTGlzdE9ic2VydmVyID0gbmV3IFZhbHVlTGlzdE9ic2VydmVyKHRoaXMuZWxlbWVudCwgdGhpcy5hY3Rpb25BdHRyaWJ1dGUsIHRoaXMpO1xuICAgICAgICAgICAgdGhpcy52YWx1ZUxpc3RPYnNlcnZlci5zdGFydCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0b3AoKSB7XG4gICAgICAgIGlmICh0aGlzLnZhbHVlTGlzdE9ic2VydmVyKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlTGlzdE9ic2VydmVyLnN0b3AoKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnZhbHVlTGlzdE9ic2VydmVyO1xuICAgICAgICAgICAgdGhpcy5kaXNjb25uZWN0QWxsQWN0aW9ucygpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBlbGVtZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0LmVsZW1lbnQ7XG4gICAgfVxuICAgIGdldCBpZGVudGlmaWVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0LmlkZW50aWZpZXI7XG4gICAgfVxuICAgIGdldCBhY3Rpb25BdHRyaWJ1dGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNjaGVtYS5hY3Rpb25BdHRyaWJ1dGU7XG4gICAgfVxuICAgIGdldCBzY2hlbWEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRleHQuc2NoZW1hO1xuICAgIH1cbiAgICBnZXQgYmluZGluZ3MoKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuYmluZGluZ3NCeUFjdGlvbi52YWx1ZXMoKSk7XG4gICAgfVxuICAgIGNvbm5lY3RBY3Rpb24oYWN0aW9uKSB7XG4gICAgICAgIGNvbnN0IGJpbmRpbmcgPSBuZXcgQmluZGluZyh0aGlzLmNvbnRleHQsIGFjdGlvbik7XG4gICAgICAgIHRoaXMuYmluZGluZ3NCeUFjdGlvbi5zZXQoYWN0aW9uLCBiaW5kaW5nKTtcbiAgICAgICAgdGhpcy5kZWxlZ2F0ZS5iaW5kaW5nQ29ubmVjdGVkKGJpbmRpbmcpO1xuICAgIH1cbiAgICBkaXNjb25uZWN0QWN0aW9uKGFjdGlvbikge1xuICAgICAgICBjb25zdCBiaW5kaW5nID0gdGhpcy5iaW5kaW5nc0J5QWN0aW9uLmdldChhY3Rpb24pO1xuICAgICAgICBpZiAoYmluZGluZykge1xuICAgICAgICAgICAgdGhpcy5iaW5kaW5nc0J5QWN0aW9uLmRlbGV0ZShhY3Rpb24pO1xuICAgICAgICAgICAgdGhpcy5kZWxlZ2F0ZS5iaW5kaW5nRGlzY29ubmVjdGVkKGJpbmRpbmcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRpc2Nvbm5lY3RBbGxBY3Rpb25zKCkge1xuICAgICAgICB0aGlzLmJpbmRpbmdzLmZvckVhY2goYmluZGluZyA9PiB0aGlzLmRlbGVnYXRlLmJpbmRpbmdEaXNjb25uZWN0ZWQoYmluZGluZykpO1xuICAgICAgICB0aGlzLmJpbmRpbmdzQnlBY3Rpb24uY2xlYXIoKTtcbiAgICB9XG4gICAgcGFyc2VWYWx1ZUZvclRva2VuKHRva2VuKSB7XG4gICAgICAgIGNvbnN0IGFjdGlvbiA9IEFjdGlvbi5mb3JUb2tlbih0b2tlbik7XG4gICAgICAgIGlmIChhY3Rpb24uaWRlbnRpZmllciA9PSB0aGlzLmlkZW50aWZpZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBhY3Rpb247XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxlbWVudE1hdGNoZWRWYWx1ZShlbGVtZW50LCBhY3Rpb24pIHtcbiAgICAgICAgdGhpcy5jb25uZWN0QWN0aW9uKGFjdGlvbik7XG4gICAgfVxuICAgIGVsZW1lbnRVbm1hdGNoZWRWYWx1ZShlbGVtZW50LCBhY3Rpb24pIHtcbiAgICAgICAgdGhpcy5kaXNjb25uZWN0QWN0aW9uKGFjdGlvbik7XG4gICAgfVxufVxuXG5jbGFzcyBWYWx1ZU9ic2VydmVyIHtcbiAgICBjb25zdHJ1Y3Rvcihjb250ZXh0LCByZWNlaXZlcikge1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICB0aGlzLnJlY2VpdmVyID0gcmVjZWl2ZXI7XG4gICAgICAgIHRoaXMuc3RyaW5nTWFwT2JzZXJ2ZXIgPSBuZXcgU3RyaW5nTWFwT2JzZXJ2ZXIodGhpcy5lbGVtZW50LCB0aGlzKTtcbiAgICAgICAgdGhpcy52YWx1ZURlc2NyaXB0b3JNYXAgPSB0aGlzLmNvbnRyb2xsZXIudmFsdWVEZXNjcmlwdG9yTWFwO1xuICAgICAgICB0aGlzLmludm9rZUNoYW5nZWRDYWxsYmFja3NGb3JEZWZhdWx0VmFsdWVzKCk7XG4gICAgfVxuICAgIHN0YXJ0KCkge1xuICAgICAgICB0aGlzLnN0cmluZ01hcE9ic2VydmVyLnN0YXJ0KCk7XG4gICAgfVxuICAgIHN0b3AoKSB7XG4gICAgICAgIHRoaXMuc3RyaW5nTWFwT2JzZXJ2ZXIuc3RvcCgpO1xuICAgIH1cbiAgICBnZXQgZWxlbWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dC5lbGVtZW50O1xuICAgIH1cbiAgICBnZXQgY29udHJvbGxlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dC5jb250cm9sbGVyO1xuICAgIH1cbiAgICBnZXRTdHJpbmdNYXBLZXlGb3JBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSkge1xuICAgICAgICBpZiAoYXR0cmlidXRlTmFtZSBpbiB0aGlzLnZhbHVlRGVzY3JpcHRvck1hcCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVEZXNjcmlwdG9yTWFwW2F0dHJpYnV0ZU5hbWVdLm5hbWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RyaW5nTWFwS2V5QWRkZWQoa2V5LCBhdHRyaWJ1dGVOYW1lKSB7XG4gICAgICAgIGNvbnN0IGRlc2NyaXB0b3IgPSB0aGlzLnZhbHVlRGVzY3JpcHRvck1hcFthdHRyaWJ1dGVOYW1lXTtcbiAgICAgICAgaWYgKCF0aGlzLmhhc1ZhbHVlKGtleSkpIHtcbiAgICAgICAgICAgIHRoaXMuaW52b2tlQ2hhbmdlZENhbGxiYWNrKGtleSwgZGVzY3JpcHRvci53cml0ZXIodGhpcy5yZWNlaXZlcltrZXldKSwgZGVzY3JpcHRvci53cml0ZXIoZGVzY3JpcHRvci5kZWZhdWx0VmFsdWUpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdHJpbmdNYXBWYWx1ZUNoYW5nZWQodmFsdWUsIG5hbWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGRlc2NyaXB0b3IgPSB0aGlzLnZhbHVlRGVzY3JpcHRvck5hbWVNYXBbbmFtZV07XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKG9sZFZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgICBvbGRWYWx1ZSA9IGRlc2NyaXB0b3Iud3JpdGVyKGRlc2NyaXB0b3IuZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmludm9rZUNoYW5nZWRDYWxsYmFjayhuYW1lLCB2YWx1ZSwgb2xkVmFsdWUpO1xuICAgIH1cbiAgICBzdHJpbmdNYXBLZXlSZW1vdmVkKGtleSwgYXR0cmlidXRlTmFtZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgY29uc3QgZGVzY3JpcHRvciA9IHRoaXMudmFsdWVEZXNjcmlwdG9yTmFtZU1hcFtrZXldO1xuICAgICAgICBpZiAodGhpcy5oYXNWYWx1ZShrZXkpKSB7XG4gICAgICAgICAgICB0aGlzLmludm9rZUNoYW5nZWRDYWxsYmFjayhrZXksIGRlc2NyaXB0b3Iud3JpdGVyKHRoaXMucmVjZWl2ZXJba2V5XSksIG9sZFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaW52b2tlQ2hhbmdlZENhbGxiYWNrKGtleSwgZGVzY3JpcHRvci53cml0ZXIoZGVzY3JpcHRvci5kZWZhdWx0VmFsdWUpLCBvbGRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaW52b2tlQ2hhbmdlZENhbGxiYWNrc0ZvckRlZmF1bHRWYWx1ZXMoKSB7XG4gICAgICAgIGZvciAoY29uc3QgeyBrZXksIG5hbWUsIGRlZmF1bHRWYWx1ZSwgd3JpdGVyIH0gb2YgdGhpcy52YWx1ZURlc2NyaXB0b3JzKSB7XG4gICAgICAgICAgICBpZiAoZGVmYXVsdFZhbHVlICE9IHVuZGVmaW5lZCAmJiAhdGhpcy5jb250cm9sbGVyLmRhdGEuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmludm9rZUNoYW5nZWRDYWxsYmFjayhuYW1lLCB3cml0ZXIoZGVmYXVsdFZhbHVlKSwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpbnZva2VDaGFuZ2VkQ2FsbGJhY2sobmFtZSwgcmF3VmFsdWUsIHJhd09sZFZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNoYW5nZWRNZXRob2ROYW1lID0gYCR7bmFtZX1DaGFuZ2VkYDtcbiAgICAgICAgY29uc3QgY2hhbmdlZE1ldGhvZCA9IHRoaXMucmVjZWl2ZXJbY2hhbmdlZE1ldGhvZE5hbWVdO1xuICAgICAgICBpZiAodHlwZW9mIGNoYW5nZWRNZXRob2QgPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICBjb25zdCBkZXNjcmlwdG9yID0gdGhpcy52YWx1ZURlc2NyaXB0b3JOYW1lTWFwW25hbWVdO1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBkZXNjcmlwdG9yLnJlYWRlcihyYXdWYWx1ZSk7XG4gICAgICAgICAgICBsZXQgb2xkVmFsdWUgPSByYXdPbGRWYWx1ZTtcbiAgICAgICAgICAgIGlmIChyYXdPbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIG9sZFZhbHVlID0gZGVzY3JpcHRvci5yZWFkZXIocmF3T2xkVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2hhbmdlZE1ldGhvZC5jYWxsKHRoaXMucmVjZWl2ZXIsIHZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IHZhbHVlRGVzY3JpcHRvcnMoKSB7XG4gICAgICAgIGNvbnN0IHsgdmFsdWVEZXNjcmlwdG9yTWFwIH0gPSB0aGlzO1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModmFsdWVEZXNjcmlwdG9yTWFwKS5tYXAoa2V5ID0+IHZhbHVlRGVzY3JpcHRvck1hcFtrZXldKTtcbiAgICB9XG4gICAgZ2V0IHZhbHVlRGVzY3JpcHRvck5hbWVNYXAoKSB7XG4gICAgICAgIGNvbnN0IGRlc2NyaXB0b3JzID0ge307XG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMudmFsdWVEZXNjcmlwdG9yTWFwKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICBjb25zdCBkZXNjcmlwdG9yID0gdGhpcy52YWx1ZURlc2NyaXB0b3JNYXBba2V5XTtcbiAgICAgICAgICAgIGRlc2NyaXB0b3JzW2Rlc2NyaXB0b3IubmFtZV0gPSBkZXNjcmlwdG9yO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGRlc2NyaXB0b3JzO1xuICAgIH1cbiAgICBoYXNWYWx1ZShhdHRyaWJ1dGVOYW1lKSB7XG4gICAgICAgIGNvbnN0IGRlc2NyaXB0b3IgPSB0aGlzLnZhbHVlRGVzY3JpcHRvck5hbWVNYXBbYXR0cmlidXRlTmFtZV07XG4gICAgICAgIGNvbnN0IGhhc01ldGhvZE5hbWUgPSBgaGFzJHtjYXBpdGFsaXplKGRlc2NyaXB0b3IubmFtZSl9YDtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVjZWl2ZXJbaGFzTWV0aG9kTmFtZV07XG4gICAgfVxufVxuXG5jbGFzcyBUYXJnZXRPYnNlcnZlciB7XG4gICAgY29uc3RydWN0b3IoY29udGV4dCwgZGVsZWdhdGUpIHtcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgdGhpcy5kZWxlZ2F0ZSA9IGRlbGVnYXRlO1xuICAgICAgICB0aGlzLnRhcmdldHNCeU5hbWUgPSBuZXcgTXVsdGltYXA7XG4gICAgfVxuICAgIHN0YXJ0KCkge1xuICAgICAgICBpZiAoIXRoaXMudG9rZW5MaXN0T2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgIHRoaXMudG9rZW5MaXN0T2JzZXJ2ZXIgPSBuZXcgVG9rZW5MaXN0T2JzZXJ2ZXIodGhpcy5lbGVtZW50LCB0aGlzLmF0dHJpYnV0ZU5hbWUsIHRoaXMpO1xuICAgICAgICAgICAgdGhpcy50b2tlbkxpc3RPYnNlcnZlci5zdGFydCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0b3AoKSB7XG4gICAgICAgIGlmICh0aGlzLnRva2VuTGlzdE9ic2VydmVyKSB7XG4gICAgICAgICAgICB0aGlzLmRpc2Nvbm5lY3RBbGxUYXJnZXRzKCk7XG4gICAgICAgICAgICB0aGlzLnRva2VuTGlzdE9ic2VydmVyLnN0b3AoKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnRva2VuTGlzdE9ic2VydmVyO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRva2VuTWF0Y2hlZCh7IGVsZW1lbnQsIGNvbnRlbnQ6IG5hbWUgfSkge1xuICAgICAgICBpZiAodGhpcy5zY29wZS5jb250YWluc0VsZW1lbnQoZWxlbWVudCkpIHtcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdFRhcmdldChlbGVtZW50LCBuYW1lKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0b2tlblVubWF0Y2hlZCh7IGVsZW1lbnQsIGNvbnRlbnQ6IG5hbWUgfSkge1xuICAgICAgICB0aGlzLmRpc2Nvbm5lY3RUYXJnZXQoZWxlbWVudCwgbmFtZSk7XG4gICAgfVxuICAgIGNvbm5lY3RUYXJnZXQoZWxlbWVudCwgbmFtZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICghdGhpcy50YXJnZXRzQnlOYW1lLmhhcyhuYW1lLCBlbGVtZW50KSkge1xuICAgICAgICAgICAgdGhpcy50YXJnZXRzQnlOYW1lLmFkZChuYW1lLCBlbGVtZW50KTtcbiAgICAgICAgICAgIChfYSA9IHRoaXMudG9rZW5MaXN0T2JzZXJ2ZXIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5wYXVzZSgoKSA9PiB0aGlzLmRlbGVnYXRlLnRhcmdldENvbm5lY3RlZChlbGVtZW50LCBuYW1lKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGlzY29ubmVjdFRhcmdldChlbGVtZW50LCBuYW1lKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKHRoaXMudGFyZ2V0c0J5TmFtZS5oYXMobmFtZSwgZWxlbWVudCkpIHtcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0c0J5TmFtZS5kZWxldGUobmFtZSwgZWxlbWVudCk7XG4gICAgICAgICAgICAoX2EgPSB0aGlzLnRva2VuTGlzdE9ic2VydmVyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucGF1c2UoKCkgPT4gdGhpcy5kZWxlZ2F0ZS50YXJnZXREaXNjb25uZWN0ZWQoZWxlbWVudCwgbmFtZSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRpc2Nvbm5lY3RBbGxUYXJnZXRzKCkge1xuICAgICAgICBmb3IgKGNvbnN0IG5hbWUgb2YgdGhpcy50YXJnZXRzQnlOYW1lLmtleXMpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiB0aGlzLnRhcmdldHNCeU5hbWUuZ2V0VmFsdWVzRm9yS2V5KG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNjb25uZWN0VGFyZ2V0KGVsZW1lbnQsIG5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBhdHRyaWJ1dGVOYW1lKCkge1xuICAgICAgICByZXR1cm4gYGRhdGEtJHt0aGlzLmNvbnRleHQuaWRlbnRpZmllcn0tdGFyZ2V0YDtcbiAgICB9XG4gICAgZ2V0IGVsZW1lbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRleHQuZWxlbWVudDtcbiAgICB9XG4gICAgZ2V0IHNjb3BlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0LnNjb3BlO1xuICAgIH1cbn1cblxuY2xhc3MgQ29udGV4dCB7XG4gICAgY29uc3RydWN0b3IobW9kdWxlLCBzY29wZSkge1xuICAgICAgICB0aGlzLmxvZ0RlYnVnQWN0aXZpdHkgPSAoZnVuY3Rpb25OYW1lLCBkZXRhaWwgPSB7fSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBpZGVudGlmaWVyLCBjb250cm9sbGVyLCBlbGVtZW50IH0gPSB0aGlzO1xuICAgICAgICAgICAgZGV0YWlsID0gT2JqZWN0LmFzc2lnbih7IGlkZW50aWZpZXIsIGNvbnRyb2xsZXIsIGVsZW1lbnQgfSwgZGV0YWlsKTtcbiAgICAgICAgICAgIHRoaXMuYXBwbGljYXRpb24ubG9nRGVidWdBY3Rpdml0eSh0aGlzLmlkZW50aWZpZXIsIGZ1bmN0aW9uTmFtZSwgZGV0YWlsKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5tb2R1bGUgPSBtb2R1bGU7XG4gICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICAgICAgdGhpcy5jb250cm9sbGVyID0gbmV3IG1vZHVsZS5jb250cm9sbGVyQ29uc3RydWN0b3IodGhpcyk7XG4gICAgICAgIHRoaXMuYmluZGluZ09ic2VydmVyID0gbmV3IEJpbmRpbmdPYnNlcnZlcih0aGlzLCB0aGlzLmRpc3BhdGNoZXIpO1xuICAgICAgICB0aGlzLnZhbHVlT2JzZXJ2ZXIgPSBuZXcgVmFsdWVPYnNlcnZlcih0aGlzLCB0aGlzLmNvbnRyb2xsZXIpO1xuICAgICAgICB0aGlzLnRhcmdldE9ic2VydmVyID0gbmV3IFRhcmdldE9ic2VydmVyKHRoaXMsIHRoaXMpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5jb250cm9sbGVyLmluaXRpYWxpemUoKTtcbiAgICAgICAgICAgIHRoaXMubG9nRGVidWdBY3Rpdml0eShcImluaXRpYWxpemVcIik7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUVycm9yKGVycm9yLCBcImluaXRpYWxpemluZyBjb250cm9sbGVyXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbm5lY3QoKSB7XG4gICAgICAgIHRoaXMuYmluZGluZ09ic2VydmVyLnN0YXJ0KCk7XG4gICAgICAgIHRoaXMudmFsdWVPYnNlcnZlci5zdGFydCgpO1xuICAgICAgICB0aGlzLnRhcmdldE9ic2VydmVyLnN0YXJ0KCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXIuY29ubmVjdCgpO1xuICAgICAgICAgICAgdGhpcy5sb2dEZWJ1Z0FjdGl2aXR5KFwiY29ubmVjdFwiKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IsIFwiY29ubmVjdGluZyBjb250cm9sbGVyXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRpc2Nvbm5lY3QoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXIuZGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgdGhpcy5sb2dEZWJ1Z0FjdGl2aXR5KFwiZGlzY29ubmVjdFwiKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IsIFwiZGlzY29ubmVjdGluZyBjb250cm9sbGVyXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudGFyZ2V0T2JzZXJ2ZXIuc3RvcCgpO1xuICAgICAgICB0aGlzLnZhbHVlT2JzZXJ2ZXIuc3RvcCgpO1xuICAgICAgICB0aGlzLmJpbmRpbmdPYnNlcnZlci5zdG9wKCk7XG4gICAgfVxuICAgIGdldCBhcHBsaWNhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kdWxlLmFwcGxpY2F0aW9uO1xuICAgIH1cbiAgICBnZXQgaWRlbnRpZmllcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kdWxlLmlkZW50aWZpZXI7XG4gICAgfVxuICAgIGdldCBzY2hlbWEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFwcGxpY2F0aW9uLnNjaGVtYTtcbiAgICB9XG4gICAgZ2V0IGRpc3BhdGNoZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFwcGxpY2F0aW9uLmRpc3BhdGNoZXI7XG4gICAgfVxuICAgIGdldCBlbGVtZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zY29wZS5lbGVtZW50O1xuICAgIH1cbiAgICBnZXQgcGFyZW50RWxlbWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5wYXJlbnRFbGVtZW50O1xuICAgIH1cbiAgICBoYW5kbGVFcnJvcihlcnJvciwgbWVzc2FnZSwgZGV0YWlsID0ge30pIHtcbiAgICAgICAgY29uc3QgeyBpZGVudGlmaWVyLCBjb250cm9sbGVyLCBlbGVtZW50IH0gPSB0aGlzO1xuICAgICAgICBkZXRhaWwgPSBPYmplY3QuYXNzaWduKHsgaWRlbnRpZmllciwgY29udHJvbGxlciwgZWxlbWVudCB9LCBkZXRhaWwpO1xuICAgICAgICB0aGlzLmFwcGxpY2F0aW9uLmhhbmRsZUVycm9yKGVycm9yLCBgRXJyb3IgJHttZXNzYWdlfWAsIGRldGFpbCk7XG4gICAgfVxuICAgIHRhcmdldENvbm5lY3RlZChlbGVtZW50LCBuYW1lKSB7XG4gICAgICAgIHRoaXMuaW52b2tlQ29udHJvbGxlck1ldGhvZChgJHtuYW1lfVRhcmdldENvbm5lY3RlZGAsIGVsZW1lbnQpO1xuICAgIH1cbiAgICB0YXJnZXREaXNjb25uZWN0ZWQoZWxlbWVudCwgbmFtZSkge1xuICAgICAgICB0aGlzLmludm9rZUNvbnRyb2xsZXJNZXRob2QoYCR7bmFtZX1UYXJnZXREaXNjb25uZWN0ZWRgLCBlbGVtZW50KTtcbiAgICB9XG4gICAgaW52b2tlQ29udHJvbGxlck1ldGhvZChtZXRob2ROYW1lLCAuLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IGNvbnRyb2xsZXIgPSB0aGlzLmNvbnRyb2xsZXI7XG4gICAgICAgIGlmICh0eXBlb2YgY29udHJvbGxlclttZXRob2ROYW1lXSA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXJbbWV0aG9kTmFtZV0oLi4uYXJncyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIHJlYWRJbmhlcml0YWJsZVN0YXRpY0FycmF5VmFsdWVzKGNvbnN0cnVjdG9yLCBwcm9wZXJ0eU5hbWUpIHtcbiAgICBjb25zdCBhbmNlc3RvcnMgPSBnZXRBbmNlc3RvcnNGb3JDb25zdHJ1Y3Rvcihjb25zdHJ1Y3Rvcik7XG4gICAgcmV0dXJuIEFycmF5LmZyb20oYW5jZXN0b3JzLnJlZHVjZSgodmFsdWVzLCBjb25zdHJ1Y3RvcikgPT4ge1xuICAgICAgICBnZXRPd25TdGF0aWNBcnJheVZhbHVlcyhjb25zdHJ1Y3RvciwgcHJvcGVydHlOYW1lKS5mb3JFYWNoKG5hbWUgPT4gdmFsdWVzLmFkZChuYW1lKSk7XG4gICAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfSwgbmV3IFNldCkpO1xufVxuZnVuY3Rpb24gcmVhZEluaGVyaXRhYmxlU3RhdGljT2JqZWN0UGFpcnMoY29uc3RydWN0b3IsIHByb3BlcnR5TmFtZSkge1xuICAgIGNvbnN0IGFuY2VzdG9ycyA9IGdldEFuY2VzdG9yc0ZvckNvbnN0cnVjdG9yKGNvbnN0cnVjdG9yKTtcbiAgICByZXR1cm4gYW5jZXN0b3JzLnJlZHVjZSgocGFpcnMsIGNvbnN0cnVjdG9yKSA9PiB7XG4gICAgICAgIHBhaXJzLnB1c2goLi4uZ2V0T3duU3RhdGljT2JqZWN0UGFpcnMoY29uc3RydWN0b3IsIHByb3BlcnR5TmFtZSkpO1xuICAgICAgICByZXR1cm4gcGFpcnM7XG4gICAgfSwgW10pO1xufVxuZnVuY3Rpb24gZ2V0QW5jZXN0b3JzRm9yQ29uc3RydWN0b3IoY29uc3RydWN0b3IpIHtcbiAgICBjb25zdCBhbmNlc3RvcnMgPSBbXTtcbiAgICB3aGlsZSAoY29uc3RydWN0b3IpIHtcbiAgICAgICAgYW5jZXN0b3JzLnB1c2goY29uc3RydWN0b3IpO1xuICAgICAgICBjb25zdHJ1Y3RvciA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihjb25zdHJ1Y3Rvcik7XG4gICAgfVxuICAgIHJldHVybiBhbmNlc3RvcnMucmV2ZXJzZSgpO1xufVxuZnVuY3Rpb24gZ2V0T3duU3RhdGljQXJyYXlWYWx1ZXMoY29uc3RydWN0b3IsIHByb3BlcnR5TmFtZSkge1xuICAgIGNvbnN0IGRlZmluaXRpb24gPSBjb25zdHJ1Y3Rvcltwcm9wZXJ0eU5hbWVdO1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGRlZmluaXRpb24pID8gZGVmaW5pdGlvbiA6IFtdO1xufVxuZnVuY3Rpb24gZ2V0T3duU3RhdGljT2JqZWN0UGFpcnMoY29uc3RydWN0b3IsIHByb3BlcnR5TmFtZSkge1xuICAgIGNvbnN0IGRlZmluaXRpb24gPSBjb25zdHJ1Y3Rvcltwcm9wZXJ0eU5hbWVdO1xuICAgIHJldHVybiBkZWZpbml0aW9uID8gT2JqZWN0LmtleXMoZGVmaW5pdGlvbikubWFwKGtleSA9PiBba2V5LCBkZWZpbml0aW9uW2tleV1dKSA6IFtdO1xufVxuXG5mdW5jdGlvbiBibGVzcyhjb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBzaGFkb3coY29uc3RydWN0b3IsIGdldEJsZXNzZWRQcm9wZXJ0aWVzKGNvbnN0cnVjdG9yKSk7XG59XG5mdW5jdGlvbiBzaGFkb3coY29uc3RydWN0b3IsIHByb3BlcnRpZXMpIHtcbiAgICBjb25zdCBzaGFkb3dDb25zdHJ1Y3RvciA9IGV4dGVuZChjb25zdHJ1Y3Rvcik7XG4gICAgY29uc3Qgc2hhZG93UHJvcGVydGllcyA9IGdldFNoYWRvd1Byb3BlcnRpZXMoY29uc3RydWN0b3IucHJvdG90eXBlLCBwcm9wZXJ0aWVzKTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhzaGFkb3dDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHNoYWRvd1Byb3BlcnRpZXMpO1xuICAgIHJldHVybiBzaGFkb3dDb25zdHJ1Y3Rvcjtcbn1cbmZ1bmN0aW9uIGdldEJsZXNzZWRQcm9wZXJ0aWVzKGNvbnN0cnVjdG9yKSB7XG4gICAgY29uc3QgYmxlc3NpbmdzID0gcmVhZEluaGVyaXRhYmxlU3RhdGljQXJyYXlWYWx1ZXMoY29uc3RydWN0b3IsIFwiYmxlc3NpbmdzXCIpO1xuICAgIHJldHVybiBibGVzc2luZ3MucmVkdWNlKChibGVzc2VkUHJvcGVydGllcywgYmxlc3NpbmcpID0+IHtcbiAgICAgICAgY29uc3QgcHJvcGVydGllcyA9IGJsZXNzaW5nKGNvbnN0cnVjdG9yKTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcHJvcGVydGllcykge1xuICAgICAgICAgICAgY29uc3QgZGVzY3JpcHRvciA9IGJsZXNzZWRQcm9wZXJ0aWVzW2tleV0gfHwge307XG4gICAgICAgICAgICBibGVzc2VkUHJvcGVydGllc1trZXldID0gT2JqZWN0LmFzc2lnbihkZXNjcmlwdG9yLCBwcm9wZXJ0aWVzW2tleV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBibGVzc2VkUHJvcGVydGllcztcbiAgICB9LCB7fSk7XG59XG5mdW5jdGlvbiBnZXRTaGFkb3dQcm9wZXJ0aWVzKHByb3RvdHlwZSwgcHJvcGVydGllcykge1xuICAgIHJldHVybiBnZXRPd25LZXlzKHByb3BlcnRpZXMpLnJlZHVjZSgoc2hhZG93UHJvcGVydGllcywga2V5KSA9PiB7XG4gICAgICAgIGNvbnN0IGRlc2NyaXB0b3IgPSBnZXRTaGFkb3dlZERlc2NyaXB0b3IocHJvdG90eXBlLCBwcm9wZXJ0aWVzLCBrZXkpO1xuICAgICAgICBpZiAoZGVzY3JpcHRvcikge1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihzaGFkb3dQcm9wZXJ0aWVzLCB7IFtrZXldOiBkZXNjcmlwdG9yIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzaGFkb3dQcm9wZXJ0aWVzO1xuICAgIH0sIHt9KTtcbn1cbmZ1bmN0aW9uIGdldFNoYWRvd2VkRGVzY3JpcHRvcihwcm90b3R5cGUsIHByb3BlcnRpZXMsIGtleSkge1xuICAgIGNvbnN0IHNoYWRvd2luZ0Rlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHByb3RvdHlwZSwga2V5KTtcbiAgICBjb25zdCBzaGFkb3dlZEJ5VmFsdWUgPSBzaGFkb3dpbmdEZXNjcmlwdG9yICYmIFwidmFsdWVcIiBpbiBzaGFkb3dpbmdEZXNjcmlwdG9yO1xuICAgIGlmICghc2hhZG93ZWRCeVZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHByb3BlcnRpZXMsIGtleSkudmFsdWU7XG4gICAgICAgIGlmIChzaGFkb3dpbmdEZXNjcmlwdG9yKSB7XG4gICAgICAgICAgICBkZXNjcmlwdG9yLmdldCA9IHNoYWRvd2luZ0Rlc2NyaXB0b3IuZ2V0IHx8IGRlc2NyaXB0b3IuZ2V0O1xuICAgICAgICAgICAgZGVzY3JpcHRvci5zZXQgPSBzaGFkb3dpbmdEZXNjcmlwdG9yLnNldCB8fCBkZXNjcmlwdG9yLnNldDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVzY3JpcHRvcjtcbiAgICB9XG59XG5jb25zdCBnZXRPd25LZXlzID0gKCgpID0+IHtcbiAgICBpZiAodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiAob2JqZWN0KSA9PiBbXG4gICAgICAgICAgICAuLi5PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmplY3QpLFxuICAgICAgICAgICAgLi4uT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpXG4gICAgICAgIF07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG4gICAgfVxufSkoKTtcbmNvbnN0IGV4dGVuZCA9ICgoKSA9PiB7XG4gICAgZnVuY3Rpb24gZXh0ZW5kV2l0aFJlZmxlY3QoY29uc3RydWN0b3IpIHtcbiAgICAgICAgZnVuY3Rpb24gZXh0ZW5kZWQoKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5jb25zdHJ1Y3QoY29uc3RydWN0b3IsIGFyZ3VtZW50cywgbmV3LnRhcmdldCk7XG4gICAgICAgIH1cbiAgICAgICAgZXh0ZW5kZWQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShjb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHtcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBleHRlbmRlZCB9XG4gICAgICAgIH0pO1xuICAgICAgICBSZWZsZWN0LnNldFByb3RvdHlwZU9mKGV4dGVuZGVkLCBjb25zdHJ1Y3Rvcik7XG4gICAgICAgIHJldHVybiBleHRlbmRlZDtcbiAgICB9XG4gICAgZnVuY3Rpb24gdGVzdFJlZmxlY3RFeHRlbnNpb24oKSB7XG4gICAgICAgIGNvbnN0IGEgPSBmdW5jdGlvbiAoKSB7IHRoaXMuYS5jYWxsKHRoaXMpOyB9O1xuICAgICAgICBjb25zdCBiID0gZXh0ZW5kV2l0aFJlZmxlY3QoYSk7XG4gICAgICAgIGIucHJvdG90eXBlLmEgPSBmdW5jdGlvbiAoKSB7IH07XG4gICAgICAgIHJldHVybiBuZXcgYjtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgdGVzdFJlZmxlY3RFeHRlbnNpb24oKTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFdpdGhSZWZsZWN0O1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIChjb25zdHJ1Y3RvcikgPT4gY2xhc3MgZXh0ZW5kZWQgZXh0ZW5kcyBjb25zdHJ1Y3RvciB7XG4gICAgICAgIH07XG4gICAgfVxufSkoKTtcblxuZnVuY3Rpb24gYmxlc3NEZWZpbml0aW9uKGRlZmluaXRpb24pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBpZGVudGlmaWVyOiBkZWZpbml0aW9uLmlkZW50aWZpZXIsXG4gICAgICAgIGNvbnRyb2xsZXJDb25zdHJ1Y3RvcjogYmxlc3MoZGVmaW5pdGlvbi5jb250cm9sbGVyQ29uc3RydWN0b3IpXG4gICAgfTtcbn1cblxuY2xhc3MgTW9kdWxlIHtcbiAgICBjb25zdHJ1Y3RvcihhcHBsaWNhdGlvbiwgZGVmaW5pdGlvbikge1xuICAgICAgICB0aGlzLmFwcGxpY2F0aW9uID0gYXBwbGljYXRpb247XG4gICAgICAgIHRoaXMuZGVmaW5pdGlvbiA9IGJsZXNzRGVmaW5pdGlvbihkZWZpbml0aW9uKTtcbiAgICAgICAgdGhpcy5jb250ZXh0c0J5U2NvcGUgPSBuZXcgV2Vha01hcDtcbiAgICAgICAgdGhpcy5jb25uZWN0ZWRDb250ZXh0cyA9IG5ldyBTZXQ7XG4gICAgfVxuICAgIGdldCBpZGVudGlmaWVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kZWZpbml0aW9uLmlkZW50aWZpZXI7XG4gICAgfVxuICAgIGdldCBjb250cm9sbGVyQ29uc3RydWN0b3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRlZmluaXRpb24uY29udHJvbGxlckNvbnN0cnVjdG9yO1xuICAgIH1cbiAgICBnZXQgY29udGV4dHMoKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuY29ubmVjdGVkQ29udGV4dHMpO1xuICAgIH1cbiAgICBjb25uZWN0Q29udGV4dEZvclNjb3BlKHNjb3BlKSB7XG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLmZldGNoQ29udGV4dEZvclNjb3BlKHNjb3BlKTtcbiAgICAgICAgdGhpcy5jb25uZWN0ZWRDb250ZXh0cy5hZGQoY29udGV4dCk7XG4gICAgICAgIGNvbnRleHQuY29ubmVjdCgpO1xuICAgIH1cbiAgICBkaXNjb25uZWN0Q29udGV4dEZvclNjb3BlKHNjb3BlKSB7XG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLmNvbnRleHRzQnlTY29wZS5nZXQoc2NvcGUpO1xuICAgICAgICBpZiAoY29udGV4dCkge1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0ZWRDb250ZXh0cy5kZWxldGUoY29udGV4dCk7XG4gICAgICAgICAgICBjb250ZXh0LmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmZXRjaENvbnRleHRGb3JTY29wZShzY29wZSkge1xuICAgICAgICBsZXQgY29udGV4dCA9IHRoaXMuY29udGV4dHNCeVNjb3BlLmdldChzY29wZSk7XG4gICAgICAgIGlmICghY29udGV4dCkge1xuICAgICAgICAgICAgY29udGV4dCA9IG5ldyBDb250ZXh0KHRoaXMsIHNjb3BlKTtcbiAgICAgICAgICAgIHRoaXMuY29udGV4dHNCeVNjb3BlLnNldChzY29wZSwgY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbnRleHQ7XG4gICAgfVxufVxuXG5jbGFzcyBDbGFzc01hcCB7XG4gICAgY29uc3RydWN0b3Ioc2NvcGUpIHtcbiAgICAgICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgIH1cbiAgICBoYXMobmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmhhcyh0aGlzLmdldERhdGFLZXkobmFtZSkpO1xuICAgIH1cbiAgICBnZXQobmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRBbGwobmFtZSlbMF07XG4gICAgfVxuICAgIGdldEFsbChuYW1lKSB7XG4gICAgICAgIGNvbnN0IHRva2VuU3RyaW5nID0gdGhpcy5kYXRhLmdldCh0aGlzLmdldERhdGFLZXkobmFtZSkpIHx8IFwiXCI7XG4gICAgICAgIHJldHVybiB0b2tlbml6ZSh0b2tlblN0cmluZyk7XG4gICAgfVxuICAgIGdldEF0dHJpYnV0ZU5hbWUobmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmdldEF0dHJpYnV0ZU5hbWVGb3JLZXkodGhpcy5nZXREYXRhS2V5KG5hbWUpKTtcbiAgICB9XG4gICAgZ2V0RGF0YUtleShuYW1lKSB7XG4gICAgICAgIHJldHVybiBgJHtuYW1lfS1jbGFzc2A7XG4gICAgfVxuICAgIGdldCBkYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zY29wZS5kYXRhO1xuICAgIH1cbn1cblxuY2xhc3MgRGF0YU1hcCB7XG4gICAgY29uc3RydWN0b3Ioc2NvcGUpIHtcbiAgICAgICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgIH1cbiAgICBnZXQgZWxlbWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2NvcGUuZWxlbWVudDtcbiAgICB9XG4gICAgZ2V0IGlkZW50aWZpZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNjb3BlLmlkZW50aWZpZXI7XG4gICAgfVxuICAgIGdldChrZXkpIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMuZ2V0QXR0cmlidXRlTmFtZUZvcktleShrZXkpO1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZShuYW1lKTtcbiAgICB9XG4gICAgc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMuZ2V0QXR0cmlidXRlTmFtZUZvcktleShrZXkpO1xuICAgICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KGtleSk7XG4gICAgfVxuICAgIGhhcyhrZXkpIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMuZ2V0QXR0cmlidXRlTmFtZUZvcktleShrZXkpO1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50Lmhhc0F0dHJpYnV0ZShuYW1lKTtcbiAgICB9XG4gICAgZGVsZXRlKGtleSkge1xuICAgICAgICBpZiAodGhpcy5oYXMoa2V5KSkge1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMuZ2V0QXR0cmlidXRlTmFtZUZvcktleShrZXkpO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldEF0dHJpYnV0ZU5hbWVGb3JLZXkoa2V5KSB7XG4gICAgICAgIHJldHVybiBgZGF0YS0ke3RoaXMuaWRlbnRpZmllcn0tJHtkYXNoZXJpemUoa2V5KX1gO1xuICAgIH1cbn1cblxuY2xhc3MgR3VpZGUge1xuICAgIGNvbnN0cnVjdG9yKGxvZ2dlcikge1xuICAgICAgICB0aGlzLndhcm5lZEtleXNCeU9iamVjdCA9IG5ldyBXZWFrTWFwO1xuICAgICAgICB0aGlzLmxvZ2dlciA9IGxvZ2dlcjtcbiAgICB9XG4gICAgd2FybihvYmplY3QsIGtleSwgbWVzc2FnZSkge1xuICAgICAgICBsZXQgd2FybmVkS2V5cyA9IHRoaXMud2FybmVkS2V5c0J5T2JqZWN0LmdldChvYmplY3QpO1xuICAgICAgICBpZiAoIXdhcm5lZEtleXMpIHtcbiAgICAgICAgICAgIHdhcm5lZEtleXMgPSBuZXcgU2V0O1xuICAgICAgICAgICAgdGhpcy53YXJuZWRLZXlzQnlPYmplY3Quc2V0KG9iamVjdCwgd2FybmVkS2V5cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF3YXJuZWRLZXlzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICB3YXJuZWRLZXlzLmFkZChrZXkpO1xuICAgICAgICAgICAgdGhpcy5sb2dnZXIud2FybihtZXNzYWdlLCBvYmplY3QpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBhdHRyaWJ1dGVWYWx1ZUNvbnRhaW5zVG9rZW4oYXR0cmlidXRlTmFtZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYFske2F0dHJpYnV0ZU5hbWV9fj1cIiR7dG9rZW59XCJdYDtcbn1cblxuY2xhc3MgVGFyZ2V0U2V0IHtcbiAgICBjb25zdHJ1Y3RvcihzY29wZSkge1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgfVxuICAgIGdldCBlbGVtZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zY29wZS5lbGVtZW50O1xuICAgIH1cbiAgICBnZXQgaWRlbnRpZmllcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2NvcGUuaWRlbnRpZmllcjtcbiAgICB9XG4gICAgZ2V0IHNjaGVtYSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2NvcGUuc2NoZW1hO1xuICAgIH1cbiAgICBoYXModGFyZ2V0TmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5maW5kKHRhcmdldE5hbWUpICE9IG51bGw7XG4gICAgfVxuICAgIGZpbmQoLi4udGFyZ2V0TmFtZXMpIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldE5hbWVzLnJlZHVjZSgodGFyZ2V0LCB0YXJnZXROYW1lKSA9PiB0YXJnZXRcbiAgICAgICAgICAgIHx8IHRoaXMuZmluZFRhcmdldCh0YXJnZXROYW1lKVxuICAgICAgICAgICAgfHwgdGhpcy5maW5kTGVnYWN5VGFyZ2V0KHRhcmdldE5hbWUpLCB1bmRlZmluZWQpO1xuICAgIH1cbiAgICBmaW5kQWxsKC4uLnRhcmdldE5hbWVzKSB7XG4gICAgICAgIHJldHVybiB0YXJnZXROYW1lcy5yZWR1Y2UoKHRhcmdldHMsIHRhcmdldE5hbWUpID0+IFtcbiAgICAgICAgICAgIC4uLnRhcmdldHMsXG4gICAgICAgICAgICAuLi50aGlzLmZpbmRBbGxUYXJnZXRzKHRhcmdldE5hbWUpLFxuICAgICAgICAgICAgLi4udGhpcy5maW5kQWxsTGVnYWN5VGFyZ2V0cyh0YXJnZXROYW1lKVxuICAgICAgICBdLCBbXSk7XG4gICAgfVxuICAgIGZpbmRUYXJnZXQodGFyZ2V0TmFtZSkge1xuICAgICAgICBjb25zdCBzZWxlY3RvciA9IHRoaXMuZ2V0U2VsZWN0b3JGb3JUYXJnZXROYW1lKHRhcmdldE5hbWUpO1xuICAgICAgICByZXR1cm4gdGhpcy5zY29wZS5maW5kRWxlbWVudChzZWxlY3Rvcik7XG4gICAgfVxuICAgIGZpbmRBbGxUYXJnZXRzKHRhcmdldE5hbWUpIHtcbiAgICAgICAgY29uc3Qgc2VsZWN0b3IgPSB0aGlzLmdldFNlbGVjdG9yRm9yVGFyZ2V0TmFtZSh0YXJnZXROYW1lKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2NvcGUuZmluZEFsbEVsZW1lbnRzKHNlbGVjdG9yKTtcbiAgICB9XG4gICAgZ2V0U2VsZWN0b3JGb3JUYXJnZXROYW1lKHRhcmdldE5hbWUpIHtcbiAgICAgICAgY29uc3QgYXR0cmlidXRlTmFtZSA9IHRoaXMuc2NoZW1hLnRhcmdldEF0dHJpYnV0ZUZvclNjb3BlKHRoaXMuaWRlbnRpZmllcik7XG4gICAgICAgIHJldHVybiBhdHRyaWJ1dGVWYWx1ZUNvbnRhaW5zVG9rZW4oYXR0cmlidXRlTmFtZSwgdGFyZ2V0TmFtZSk7XG4gICAgfVxuICAgIGZpbmRMZWdhY3lUYXJnZXQodGFyZ2V0TmFtZSkge1xuICAgICAgICBjb25zdCBzZWxlY3RvciA9IHRoaXMuZ2V0TGVnYWN5U2VsZWN0b3JGb3JUYXJnZXROYW1lKHRhcmdldE5hbWUpO1xuICAgICAgICByZXR1cm4gdGhpcy5kZXByZWNhdGUodGhpcy5zY29wZS5maW5kRWxlbWVudChzZWxlY3RvciksIHRhcmdldE5hbWUpO1xuICAgIH1cbiAgICBmaW5kQWxsTGVnYWN5VGFyZ2V0cyh0YXJnZXROYW1lKSB7XG4gICAgICAgIGNvbnN0IHNlbGVjdG9yID0gdGhpcy5nZXRMZWdhY3lTZWxlY3RvckZvclRhcmdldE5hbWUodGFyZ2V0TmFtZSk7XG4gICAgICAgIHJldHVybiB0aGlzLnNjb3BlLmZpbmRBbGxFbGVtZW50cyhzZWxlY3RvcikubWFwKGVsZW1lbnQgPT4gdGhpcy5kZXByZWNhdGUoZWxlbWVudCwgdGFyZ2V0TmFtZSkpO1xuICAgIH1cbiAgICBnZXRMZWdhY3lTZWxlY3RvckZvclRhcmdldE5hbWUodGFyZ2V0TmFtZSkge1xuICAgICAgICBjb25zdCB0YXJnZXREZXNjcmlwdG9yID0gYCR7dGhpcy5pZGVudGlmaWVyfS4ke3RhcmdldE5hbWV9YDtcbiAgICAgICAgcmV0dXJuIGF0dHJpYnV0ZVZhbHVlQ29udGFpbnNUb2tlbih0aGlzLnNjaGVtYS50YXJnZXRBdHRyaWJ1dGUsIHRhcmdldERlc2NyaXB0b3IpO1xuICAgIH1cbiAgICBkZXByZWNhdGUoZWxlbWVudCwgdGFyZ2V0TmFtZSkge1xuICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgY29uc3QgeyBpZGVudGlmaWVyIH0gPSB0aGlzO1xuICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlTmFtZSA9IHRoaXMuc2NoZW1hLnRhcmdldEF0dHJpYnV0ZTtcbiAgICAgICAgICAgIGNvbnN0IHJldmlzZWRBdHRyaWJ1dGVOYW1lID0gdGhpcy5zY2hlbWEudGFyZ2V0QXR0cmlidXRlRm9yU2NvcGUoaWRlbnRpZmllcik7XG4gICAgICAgICAgICB0aGlzLmd1aWRlLndhcm4oZWxlbWVudCwgYHRhcmdldDoke3RhcmdldE5hbWV9YCwgYFBsZWFzZSByZXBsYWNlICR7YXR0cmlidXRlTmFtZX09XCIke2lkZW50aWZpZXJ9LiR7dGFyZ2V0TmFtZX1cIiB3aXRoICR7cmV2aXNlZEF0dHJpYnV0ZU5hbWV9PVwiJHt0YXJnZXROYW1lfVwiLiBgICtcbiAgICAgICAgICAgICAgICBgVGhlICR7YXR0cmlidXRlTmFtZX0gYXR0cmlidXRlIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSB2ZXJzaW9uIG9mIFN0aW11bHVzLmApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH1cbiAgICBnZXQgZ3VpZGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNjb3BlLmd1aWRlO1xuICAgIH1cbn1cblxuY2xhc3MgU2NvcGUge1xuICAgIGNvbnN0cnVjdG9yKHNjaGVtYSwgZWxlbWVudCwgaWRlbnRpZmllciwgbG9nZ2VyKSB7XG4gICAgICAgIHRoaXMudGFyZ2V0cyA9IG5ldyBUYXJnZXRTZXQodGhpcyk7XG4gICAgICAgIHRoaXMuY2xhc3NlcyA9IG5ldyBDbGFzc01hcCh0aGlzKTtcbiAgICAgICAgdGhpcy5kYXRhID0gbmV3IERhdGFNYXAodGhpcyk7XG4gICAgICAgIHRoaXMuY29udGFpbnNFbGVtZW50ID0gKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50LmNsb3Nlc3QodGhpcy5jb250cm9sbGVyU2VsZWN0b3IpID09PSB0aGlzLmVsZW1lbnQ7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc2NoZW1hID0gc2NoZW1hO1xuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICB0aGlzLmlkZW50aWZpZXIgPSBpZGVudGlmaWVyO1xuICAgICAgICB0aGlzLmd1aWRlID0gbmV3IEd1aWRlKGxvZ2dlcik7XG4gICAgfVxuICAgIGZpbmRFbGVtZW50KHNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQubWF0Y2hlcyhzZWxlY3RvcilcbiAgICAgICAgICAgID8gdGhpcy5lbGVtZW50XG4gICAgICAgICAgICA6IHRoaXMucXVlcnlFbGVtZW50cyhzZWxlY3RvcikuZmluZCh0aGlzLmNvbnRhaW5zRWxlbWVudCk7XG4gICAgfVxuICAgIGZpbmRBbGxFbGVtZW50cyhzZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgLi4udGhpcy5lbGVtZW50Lm1hdGNoZXMoc2VsZWN0b3IpID8gW3RoaXMuZWxlbWVudF0gOiBbXSxcbiAgICAgICAgICAgIC4uLnRoaXMucXVlcnlFbGVtZW50cyhzZWxlY3RvcikuZmlsdGVyKHRoaXMuY29udGFpbnNFbGVtZW50KVxuICAgICAgICBdO1xuICAgIH1cbiAgICBxdWVyeUVsZW1lbnRzKHNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSk7XG4gICAgfVxuICAgIGdldCBjb250cm9sbGVyU2VsZWN0b3IoKSB7XG4gICAgICAgIHJldHVybiBhdHRyaWJ1dGVWYWx1ZUNvbnRhaW5zVG9rZW4odGhpcy5zY2hlbWEuY29udHJvbGxlckF0dHJpYnV0ZSwgdGhpcy5pZGVudGlmaWVyKTtcbiAgICB9XG59XG5cbmNsYXNzIFNjb3BlT2JzZXJ2ZXIge1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQsIHNjaGVtYSwgZGVsZWdhdGUpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgdGhpcy5zY2hlbWEgPSBzY2hlbWE7XG4gICAgICAgIHRoaXMuZGVsZWdhdGUgPSBkZWxlZ2F0ZTtcbiAgICAgICAgdGhpcy52YWx1ZUxpc3RPYnNlcnZlciA9IG5ldyBWYWx1ZUxpc3RPYnNlcnZlcih0aGlzLmVsZW1lbnQsIHRoaXMuY29udHJvbGxlckF0dHJpYnV0ZSwgdGhpcyk7XG4gICAgICAgIHRoaXMuc2NvcGVzQnlJZGVudGlmaWVyQnlFbGVtZW50ID0gbmV3IFdlYWtNYXA7XG4gICAgICAgIHRoaXMuc2NvcGVSZWZlcmVuY2VDb3VudHMgPSBuZXcgV2Vha01hcDtcbiAgICB9XG4gICAgc3RhcnQoKSB7XG4gICAgICAgIHRoaXMudmFsdWVMaXN0T2JzZXJ2ZXIuc3RhcnQoKTtcbiAgICB9XG4gICAgc3RvcCgpIHtcbiAgICAgICAgdGhpcy52YWx1ZUxpc3RPYnNlcnZlci5zdG9wKCk7XG4gICAgfVxuICAgIGdldCBjb250cm9sbGVyQXR0cmlidXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zY2hlbWEuY29udHJvbGxlckF0dHJpYnV0ZTtcbiAgICB9XG4gICAgcGFyc2VWYWx1ZUZvclRva2VuKHRva2VuKSB7XG4gICAgICAgIGNvbnN0IHsgZWxlbWVudCwgY29udGVudDogaWRlbnRpZmllciB9ID0gdG9rZW47XG4gICAgICAgIGNvbnN0IHNjb3Blc0J5SWRlbnRpZmllciA9IHRoaXMuZmV0Y2hTY29wZXNCeUlkZW50aWZpZXJGb3JFbGVtZW50KGVsZW1lbnQpO1xuICAgICAgICBsZXQgc2NvcGUgPSBzY29wZXNCeUlkZW50aWZpZXIuZ2V0KGlkZW50aWZpZXIpO1xuICAgICAgICBpZiAoIXNjb3BlKSB7XG4gICAgICAgICAgICBzY29wZSA9IHRoaXMuZGVsZWdhdGUuY3JlYXRlU2NvcGVGb3JFbGVtZW50QW5kSWRlbnRpZmllcihlbGVtZW50LCBpZGVudGlmaWVyKTtcbiAgICAgICAgICAgIHNjb3Blc0J5SWRlbnRpZmllci5zZXQoaWRlbnRpZmllciwgc2NvcGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzY29wZTtcbiAgICB9XG4gICAgZWxlbWVudE1hdGNoZWRWYWx1ZShlbGVtZW50LCB2YWx1ZSkge1xuICAgICAgICBjb25zdCByZWZlcmVuY2VDb3VudCA9ICh0aGlzLnNjb3BlUmVmZXJlbmNlQ291bnRzLmdldCh2YWx1ZSkgfHwgMCkgKyAxO1xuICAgICAgICB0aGlzLnNjb3BlUmVmZXJlbmNlQ291bnRzLnNldCh2YWx1ZSwgcmVmZXJlbmNlQ291bnQpO1xuICAgICAgICBpZiAocmVmZXJlbmNlQ291bnQgPT0gMSkge1xuICAgICAgICAgICAgdGhpcy5kZWxlZ2F0ZS5zY29wZUNvbm5lY3RlZCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxlbWVudFVubWF0Y2hlZFZhbHVlKGVsZW1lbnQsIHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHJlZmVyZW5jZUNvdW50ID0gdGhpcy5zY29wZVJlZmVyZW5jZUNvdW50cy5nZXQodmFsdWUpO1xuICAgICAgICBpZiAocmVmZXJlbmNlQ291bnQpIHtcbiAgICAgICAgICAgIHRoaXMuc2NvcGVSZWZlcmVuY2VDb3VudHMuc2V0KHZhbHVlLCByZWZlcmVuY2VDb3VudCAtIDEpO1xuICAgICAgICAgICAgaWYgKHJlZmVyZW5jZUNvdW50ID09IDEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlbGVnYXRlLnNjb3BlRGlzY29ubmVjdGVkKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmZXRjaFNjb3Blc0J5SWRlbnRpZmllckZvckVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgICBsZXQgc2NvcGVzQnlJZGVudGlmaWVyID0gdGhpcy5zY29wZXNCeUlkZW50aWZpZXJCeUVsZW1lbnQuZ2V0KGVsZW1lbnQpO1xuICAgICAgICBpZiAoIXNjb3Blc0J5SWRlbnRpZmllcikge1xuICAgICAgICAgICAgc2NvcGVzQnlJZGVudGlmaWVyID0gbmV3IE1hcDtcbiAgICAgICAgICAgIHRoaXMuc2NvcGVzQnlJZGVudGlmaWVyQnlFbGVtZW50LnNldChlbGVtZW50LCBzY29wZXNCeUlkZW50aWZpZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzY29wZXNCeUlkZW50aWZpZXI7XG4gICAgfVxufVxuXG5jbGFzcyBSb3V0ZXIge1xuICAgIGNvbnN0cnVjdG9yKGFwcGxpY2F0aW9uKSB7XG4gICAgICAgIHRoaXMuYXBwbGljYXRpb24gPSBhcHBsaWNhdGlvbjtcbiAgICAgICAgdGhpcy5zY29wZU9ic2VydmVyID0gbmV3IFNjb3BlT2JzZXJ2ZXIodGhpcy5lbGVtZW50LCB0aGlzLnNjaGVtYSwgdGhpcyk7XG4gICAgICAgIHRoaXMuc2NvcGVzQnlJZGVudGlmaWVyID0gbmV3IE11bHRpbWFwO1xuICAgICAgICB0aGlzLm1vZHVsZXNCeUlkZW50aWZpZXIgPSBuZXcgTWFwO1xuICAgIH1cbiAgICBnZXQgZWxlbWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbGljYXRpb24uZWxlbWVudDtcbiAgICB9XG4gICAgZ2V0IHNjaGVtYSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbGljYXRpb24uc2NoZW1hO1xuICAgIH1cbiAgICBnZXQgbG9nZ2VyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hcHBsaWNhdGlvbi5sb2dnZXI7XG4gICAgfVxuICAgIGdldCBjb250cm9sbGVyQXR0cmlidXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zY2hlbWEuY29udHJvbGxlckF0dHJpYnV0ZTtcbiAgICB9XG4gICAgZ2V0IG1vZHVsZXMoKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMubW9kdWxlc0J5SWRlbnRpZmllci52YWx1ZXMoKSk7XG4gICAgfVxuICAgIGdldCBjb250ZXh0cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kdWxlcy5yZWR1Y2UoKGNvbnRleHRzLCBtb2R1bGUpID0+IGNvbnRleHRzLmNvbmNhdChtb2R1bGUuY29udGV4dHMpLCBbXSk7XG4gICAgfVxuICAgIHN0YXJ0KCkge1xuICAgICAgICB0aGlzLnNjb3BlT2JzZXJ2ZXIuc3RhcnQoKTtcbiAgICB9XG4gICAgc3RvcCgpIHtcbiAgICAgICAgdGhpcy5zY29wZU9ic2VydmVyLnN0b3AoKTtcbiAgICB9XG4gICAgbG9hZERlZmluaXRpb24oZGVmaW5pdGlvbikge1xuICAgICAgICB0aGlzLnVubG9hZElkZW50aWZpZXIoZGVmaW5pdGlvbi5pZGVudGlmaWVyKTtcbiAgICAgICAgY29uc3QgbW9kdWxlID0gbmV3IE1vZHVsZSh0aGlzLmFwcGxpY2F0aW9uLCBkZWZpbml0aW9uKTtcbiAgICAgICAgdGhpcy5jb25uZWN0TW9kdWxlKG1vZHVsZSk7XG4gICAgfVxuICAgIHVubG9hZElkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICAgICAgICBjb25zdCBtb2R1bGUgPSB0aGlzLm1vZHVsZXNCeUlkZW50aWZpZXIuZ2V0KGlkZW50aWZpZXIpO1xuICAgICAgICBpZiAobW9kdWxlKSB7XG4gICAgICAgICAgICB0aGlzLmRpc2Nvbm5lY3RNb2R1bGUobW9kdWxlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRDb250ZXh0Rm9yRWxlbWVudEFuZElkZW50aWZpZXIoZWxlbWVudCwgaWRlbnRpZmllcikge1xuICAgICAgICBjb25zdCBtb2R1bGUgPSB0aGlzLm1vZHVsZXNCeUlkZW50aWZpZXIuZ2V0KGlkZW50aWZpZXIpO1xuICAgICAgICBpZiAobW9kdWxlKSB7XG4gICAgICAgICAgICByZXR1cm4gbW9kdWxlLmNvbnRleHRzLmZpbmQoY29udGV4dCA9PiBjb250ZXh0LmVsZW1lbnQgPT0gZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaGFuZGxlRXJyb3IoZXJyb3IsIG1lc3NhZ2UsIGRldGFpbCkge1xuICAgICAgICB0aGlzLmFwcGxpY2F0aW9uLmhhbmRsZUVycm9yKGVycm9yLCBtZXNzYWdlLCBkZXRhaWwpO1xuICAgIH1cbiAgICBjcmVhdGVTY29wZUZvckVsZW1lbnRBbmRJZGVudGlmaWVyKGVsZW1lbnQsIGlkZW50aWZpZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTY29wZSh0aGlzLnNjaGVtYSwgZWxlbWVudCwgaWRlbnRpZmllciwgdGhpcy5sb2dnZXIpO1xuICAgIH1cbiAgICBzY29wZUNvbm5lY3RlZChzY29wZSkge1xuICAgICAgICB0aGlzLnNjb3Blc0J5SWRlbnRpZmllci5hZGQoc2NvcGUuaWRlbnRpZmllciwgc2NvcGUpO1xuICAgICAgICBjb25zdCBtb2R1bGUgPSB0aGlzLm1vZHVsZXNCeUlkZW50aWZpZXIuZ2V0KHNjb3BlLmlkZW50aWZpZXIpO1xuICAgICAgICBpZiAobW9kdWxlKSB7XG4gICAgICAgICAgICBtb2R1bGUuY29ubmVjdENvbnRleHRGb3JTY29wZShzY29wZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2NvcGVEaXNjb25uZWN0ZWQoc2NvcGUpIHtcbiAgICAgICAgdGhpcy5zY29wZXNCeUlkZW50aWZpZXIuZGVsZXRlKHNjb3BlLmlkZW50aWZpZXIsIHNjb3BlKTtcbiAgICAgICAgY29uc3QgbW9kdWxlID0gdGhpcy5tb2R1bGVzQnlJZGVudGlmaWVyLmdldChzY29wZS5pZGVudGlmaWVyKTtcbiAgICAgICAgaWYgKG1vZHVsZSkge1xuICAgICAgICAgICAgbW9kdWxlLmRpc2Nvbm5lY3RDb250ZXh0Rm9yU2NvcGUoc2NvcGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbm5lY3RNb2R1bGUobW9kdWxlKSB7XG4gICAgICAgIHRoaXMubW9kdWxlc0J5SWRlbnRpZmllci5zZXQobW9kdWxlLmlkZW50aWZpZXIsIG1vZHVsZSk7XG4gICAgICAgIGNvbnN0IHNjb3BlcyA9IHRoaXMuc2NvcGVzQnlJZGVudGlmaWVyLmdldFZhbHVlc0ZvcktleShtb2R1bGUuaWRlbnRpZmllcik7XG4gICAgICAgIHNjb3Blcy5mb3JFYWNoKHNjb3BlID0+IG1vZHVsZS5jb25uZWN0Q29udGV4dEZvclNjb3BlKHNjb3BlKSk7XG4gICAgfVxuICAgIGRpc2Nvbm5lY3RNb2R1bGUobW9kdWxlKSB7XG4gICAgICAgIHRoaXMubW9kdWxlc0J5SWRlbnRpZmllci5kZWxldGUobW9kdWxlLmlkZW50aWZpZXIpO1xuICAgICAgICBjb25zdCBzY29wZXMgPSB0aGlzLnNjb3Blc0J5SWRlbnRpZmllci5nZXRWYWx1ZXNGb3JLZXkobW9kdWxlLmlkZW50aWZpZXIpO1xuICAgICAgICBzY29wZXMuZm9yRWFjaChzY29wZSA9PiBtb2R1bGUuZGlzY29ubmVjdENvbnRleHRGb3JTY29wZShzY29wZSkpO1xuICAgIH1cbn1cblxuY29uc3QgZGVmYXVsdFNjaGVtYSA9IHtcbiAgICBjb250cm9sbGVyQXR0cmlidXRlOiBcImRhdGEtY29udHJvbGxlclwiLFxuICAgIGFjdGlvbkF0dHJpYnV0ZTogXCJkYXRhLWFjdGlvblwiLFxuICAgIHRhcmdldEF0dHJpYnV0ZTogXCJkYXRhLXRhcmdldFwiLFxuICAgIHRhcmdldEF0dHJpYnV0ZUZvclNjb3BlOiBpZGVudGlmaWVyID0+IGBkYXRhLSR7aWRlbnRpZmllcn0tdGFyZ2V0YFxufTtcblxuY2xhc3MgQXBwbGljYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHNjaGVtYSA9IGRlZmF1bHRTY2hlbWEpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIgPSBjb25zb2xlO1xuICAgICAgICB0aGlzLmRlYnVnID0gZmFsc2U7XG4gICAgICAgIHRoaXMubG9nRGVidWdBY3Rpdml0eSA9IChpZGVudGlmaWVyLCBmdW5jdGlvbk5hbWUsIGRldGFpbCA9IHt9KSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5kZWJ1Zykge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nRm9ybWF0dGVkTWVzc2FnZShpZGVudGlmaWVyLCBmdW5jdGlvbk5hbWUsIGRldGFpbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgIHRoaXMuc2NoZW1hID0gc2NoZW1hO1xuICAgICAgICB0aGlzLmRpc3BhdGNoZXIgPSBuZXcgRGlzcGF0Y2hlcih0aGlzKTtcbiAgICAgICAgdGhpcy5yb3V0ZXIgPSBuZXcgUm91dGVyKHRoaXMpO1xuICAgIH1cbiAgICBzdGF0aWMgc3RhcnQoZWxlbWVudCwgc2NoZW1hKSB7XG4gICAgICAgIGNvbnN0IGFwcGxpY2F0aW9uID0gbmV3IEFwcGxpY2F0aW9uKGVsZW1lbnQsIHNjaGVtYSk7XG4gICAgICAgIGFwcGxpY2F0aW9uLnN0YXJ0KCk7XG4gICAgICAgIHJldHVybiBhcHBsaWNhdGlvbjtcbiAgICB9XG4gICAgYXN5bmMgc3RhcnQoKSB7XG4gICAgICAgIGF3YWl0IGRvbVJlYWR5KCk7XG4gICAgICAgIHRoaXMubG9nRGVidWdBY3Rpdml0eShcImFwcGxpY2F0aW9uXCIsIFwic3RhcnRpbmdcIik7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hlci5zdGFydCgpO1xuICAgICAgICB0aGlzLnJvdXRlci5zdGFydCgpO1xuICAgICAgICB0aGlzLmxvZ0RlYnVnQWN0aXZpdHkoXCJhcHBsaWNhdGlvblwiLCBcInN0YXJ0XCIpO1xuICAgIH1cbiAgICBzdG9wKCkge1xuICAgICAgICB0aGlzLmxvZ0RlYnVnQWN0aXZpdHkoXCJhcHBsaWNhdGlvblwiLCBcInN0b3BwaW5nXCIpO1xuICAgICAgICB0aGlzLmRpc3BhdGNoZXIuc3RvcCgpO1xuICAgICAgICB0aGlzLnJvdXRlci5zdG9wKCk7XG4gICAgICAgIHRoaXMubG9nRGVidWdBY3Rpdml0eShcImFwcGxpY2F0aW9uXCIsIFwic3RvcFwiKTtcbiAgICB9XG4gICAgcmVnaXN0ZXIoaWRlbnRpZmllciwgY29udHJvbGxlckNvbnN0cnVjdG9yKSB7XG4gICAgICAgIGlmIChjb250cm9sbGVyQ29uc3RydWN0b3Iuc2hvdWxkTG9hZCkge1xuICAgICAgICAgICAgdGhpcy5sb2FkKHsgaWRlbnRpZmllciwgY29udHJvbGxlckNvbnN0cnVjdG9yIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGxvYWQoaGVhZCwgLi4ucmVzdCkge1xuICAgICAgICBjb25zdCBkZWZpbml0aW9ucyA9IEFycmF5LmlzQXJyYXkoaGVhZCkgPyBoZWFkIDogW2hlYWQsIC4uLnJlc3RdO1xuICAgICAgICBkZWZpbml0aW9ucy5mb3JFYWNoKGRlZmluaXRpb24gPT4gdGhpcy5yb3V0ZXIubG9hZERlZmluaXRpb24oZGVmaW5pdGlvbikpO1xuICAgIH1cbiAgICB1bmxvYWQoaGVhZCwgLi4ucmVzdCkge1xuICAgICAgICBjb25zdCBpZGVudGlmaWVycyA9IEFycmF5LmlzQXJyYXkoaGVhZCkgPyBoZWFkIDogW2hlYWQsIC4uLnJlc3RdO1xuICAgICAgICBpZGVudGlmaWVycy5mb3JFYWNoKGlkZW50aWZpZXIgPT4gdGhpcy5yb3V0ZXIudW5sb2FkSWRlbnRpZmllcihpZGVudGlmaWVyKSk7XG4gICAgfVxuICAgIGdldCBjb250cm9sbGVycygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucm91dGVyLmNvbnRleHRzLm1hcChjb250ZXh0ID0+IGNvbnRleHQuY29udHJvbGxlcik7XG4gICAgfVxuICAgIGdldENvbnRyb2xsZXJGb3JFbGVtZW50QW5kSWRlbnRpZmllcihlbGVtZW50LCBpZGVudGlmaWVyKSB7XG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLnJvdXRlci5nZXRDb250ZXh0Rm9yRWxlbWVudEFuZElkZW50aWZpZXIoZWxlbWVudCwgaWRlbnRpZmllcik7XG4gICAgICAgIHJldHVybiBjb250ZXh0ID8gY29udGV4dC5jb250cm9sbGVyIDogbnVsbDtcbiAgICB9XG4gICAgaGFuZGxlRXJyb3IoZXJyb3IsIG1lc3NhZ2UsIGRldGFpbCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKGAlc1xcblxcbiVvXFxuXFxuJW9gLCBtZXNzYWdlLCBlcnJvciwgZGV0YWlsKTtcbiAgICAgICAgKF9hID0gd2luZG93Lm9uZXJyb3IpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHdpbmRvdywgbWVzc2FnZSwgXCJcIiwgMCwgMCwgZXJyb3IpO1xuICAgIH1cbiAgICBsb2dGb3JtYXR0ZWRNZXNzYWdlKGlkZW50aWZpZXIsIGZ1bmN0aW9uTmFtZSwgZGV0YWlsID0ge30pIHtcbiAgICAgICAgZGV0YWlsID0gT2JqZWN0LmFzc2lnbih7IGFwcGxpY2F0aW9uOiB0aGlzIH0sIGRldGFpbCk7XG4gICAgICAgIHRoaXMubG9nZ2VyLmdyb3VwQ29sbGFwc2VkKGAke2lkZW50aWZpZXJ9ICMke2Z1bmN0aW9uTmFtZX1gKTtcbiAgICAgICAgdGhpcy5sb2dnZXIubG9nKFwiZGV0YWlsczpcIiwgT2JqZWN0LmFzc2lnbih7fSwgZGV0YWlsKSk7XG4gICAgICAgIHRoaXMubG9nZ2VyLmdyb3VwRW5kKCk7XG4gICAgfVxufVxuZnVuY3Rpb24gZG9tUmVhZHkoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PSBcImxvYWRpbmdcIikge1xuICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgKCkgPT4gcmVzb2x2ZSgpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBDbGFzc1Byb3BlcnRpZXNCbGVzc2luZyhjb25zdHJ1Y3Rvcikge1xuICAgIGNvbnN0IGNsYXNzZXMgPSByZWFkSW5oZXJpdGFibGVTdGF0aWNBcnJheVZhbHVlcyhjb25zdHJ1Y3RvciwgXCJjbGFzc2VzXCIpO1xuICAgIHJldHVybiBjbGFzc2VzLnJlZHVjZSgocHJvcGVydGllcywgY2xhc3NEZWZpbml0aW9uKSA9PiB7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHByb3BlcnRpZXMsIHByb3BlcnRpZXNGb3JDbGFzc0RlZmluaXRpb24oY2xhc3NEZWZpbml0aW9uKSk7XG4gICAgfSwge30pO1xufVxuZnVuY3Rpb24gcHJvcGVydGllc0ZvckNsYXNzRGVmaW5pdGlvbihrZXkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBbYCR7a2V5fUNsYXNzYF06IHtcbiAgICAgICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGNsYXNzZXMgfSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgaWYgKGNsYXNzZXMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNsYXNzZXMuZ2V0KGtleSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGUgPSBjbGFzc2VzLmdldEF0dHJpYnV0ZU5hbWUoa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBNaXNzaW5nIGF0dHJpYnV0ZSBcIiR7YXR0cmlidXRlfVwiYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBbYCR7a2V5fUNsYXNzZXNgXToge1xuICAgICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNsYXNzZXMuZ2V0QWxsKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFtgaGFzJHtjYXBpdGFsaXplKGtleSl9Q2xhc3NgXToge1xuICAgICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNsYXNzZXMuaGFzKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5mdW5jdGlvbiBUYXJnZXRQcm9wZXJ0aWVzQmxlc3NpbmcoY29uc3RydWN0b3IpIHtcbiAgICBjb25zdCB0YXJnZXRzID0gcmVhZEluaGVyaXRhYmxlU3RhdGljQXJyYXlWYWx1ZXMoY29uc3RydWN0b3IsIFwidGFyZ2V0c1wiKTtcbiAgICByZXR1cm4gdGFyZ2V0cy5yZWR1Y2UoKHByb3BlcnRpZXMsIHRhcmdldERlZmluaXRpb24pID0+IHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ocHJvcGVydGllcywgcHJvcGVydGllc0ZvclRhcmdldERlZmluaXRpb24odGFyZ2V0RGVmaW5pdGlvbikpO1xuICAgIH0sIHt9KTtcbn1cbmZ1bmN0aW9uIHByb3BlcnRpZXNGb3JUYXJnZXREZWZpbml0aW9uKG5hbWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBbYCR7bmFtZX1UYXJnZXRgXToge1xuICAgICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXMudGFyZ2V0cy5maW5kKG5hbWUpO1xuICAgICAgICAgICAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTWlzc2luZyB0YXJnZXQgZWxlbWVudCBcIiR7bmFtZX1cIiBmb3IgXCIke3RoaXMuaWRlbnRpZmllcn1cIiBjb250cm9sbGVyYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBbYCR7bmFtZX1UYXJnZXRzYF06IHtcbiAgICAgICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50YXJnZXRzLmZpbmRBbGwobmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFtgaGFzJHtjYXBpdGFsaXplKG5hbWUpfVRhcmdldGBdOiB7XG4gICAgICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudGFyZ2V0cy5oYXMobmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5mdW5jdGlvbiBWYWx1ZVByb3BlcnRpZXNCbGVzc2luZyhjb25zdHJ1Y3Rvcikge1xuICAgIGNvbnN0IHZhbHVlRGVmaW5pdGlvblBhaXJzID0gcmVhZEluaGVyaXRhYmxlU3RhdGljT2JqZWN0UGFpcnMoY29uc3RydWN0b3IsIFwidmFsdWVzXCIpO1xuICAgIGNvbnN0IHByb3BlcnR5RGVzY3JpcHRvck1hcCA9IHtcbiAgICAgICAgdmFsdWVEZXNjcmlwdG9yTWFwOiB7XG4gICAgICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlRGVmaW5pdGlvblBhaXJzLnJlZHVjZSgocmVzdWx0LCB2YWx1ZURlZmluaXRpb25QYWlyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlRGVzY3JpcHRvciA9IHBhcnNlVmFsdWVEZWZpbml0aW9uUGFpcih2YWx1ZURlZmluaXRpb25QYWlyKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlTmFtZSA9IHRoaXMuZGF0YS5nZXRBdHRyaWJ1dGVOYW1lRm9yS2V5KHZhbHVlRGVzY3JpcHRvci5rZXkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihyZXN1bHQsIHsgW2F0dHJpYnV0ZU5hbWVdOiB2YWx1ZURlc2NyaXB0b3IgfSk7XG4gICAgICAgICAgICAgICAgfSwge30pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gdmFsdWVEZWZpbml0aW9uUGFpcnMucmVkdWNlKChwcm9wZXJ0aWVzLCB2YWx1ZURlZmluaXRpb25QYWlyKSA9PiB7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHByb3BlcnRpZXMsIHByb3BlcnRpZXNGb3JWYWx1ZURlZmluaXRpb25QYWlyKHZhbHVlRGVmaW5pdGlvblBhaXIpKTtcbiAgICB9LCBwcm9wZXJ0eURlc2NyaXB0b3JNYXApO1xufVxuZnVuY3Rpb24gcHJvcGVydGllc0ZvclZhbHVlRGVmaW5pdGlvblBhaXIodmFsdWVEZWZpbml0aW9uUGFpcikge1xuICAgIGNvbnN0IGRlZmluaXRpb24gPSBwYXJzZVZhbHVlRGVmaW5pdGlvblBhaXIodmFsdWVEZWZpbml0aW9uUGFpcik7XG4gICAgY29uc3QgeyBrZXksIG5hbWUsIHJlYWRlcjogcmVhZCwgd3JpdGVyOiB3cml0ZSB9ID0gZGVmaW5pdGlvbjtcbiAgICByZXR1cm4ge1xuICAgICAgICBbbmFtZV06IHtcbiAgICAgICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZGF0YS5nZXQoa2V5KTtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlYWQodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlZmluaXRpb24uZGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuZGVsZXRlKGtleSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuc2V0KGtleSwgd3JpdGUodmFsdWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFtgaGFzJHtjYXBpdGFsaXplKG5hbWUpfWBdOiB7XG4gICAgICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5oYXMoa2V5KSB8fCBkZWZpbml0aW9uLmhhc0N1c3RvbURlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59XG5mdW5jdGlvbiBwYXJzZVZhbHVlRGVmaW5pdGlvblBhaXIoW3Rva2VuLCB0eXBlRGVmaW5pdGlvbl0pIHtcbiAgICByZXR1cm4gdmFsdWVEZXNjcmlwdG9yRm9yVG9rZW5BbmRUeXBlRGVmaW5pdGlvbih0b2tlbiwgdHlwZURlZmluaXRpb24pO1xufVxuZnVuY3Rpb24gcGFyc2VWYWx1ZVR5cGVDb25zdGFudChjb25zdGFudCkge1xuICAgIHN3aXRjaCAoY29uc3RhbnQpIHtcbiAgICAgICAgY2FzZSBBcnJheTogcmV0dXJuIFwiYXJyYXlcIjtcbiAgICAgICAgY2FzZSBCb29sZWFuOiByZXR1cm4gXCJib29sZWFuXCI7XG4gICAgICAgIGNhc2UgTnVtYmVyOiByZXR1cm4gXCJudW1iZXJcIjtcbiAgICAgICAgY2FzZSBPYmplY3Q6IHJldHVybiBcIm9iamVjdFwiO1xuICAgICAgICBjYXNlIFN0cmluZzogcmV0dXJuIFwic3RyaW5nXCI7XG4gICAgfVxufVxuZnVuY3Rpb24gcGFyc2VWYWx1ZVR5cGVEZWZhdWx0KGRlZmF1bHRWYWx1ZSkge1xuICAgIHN3aXRjaCAodHlwZW9mIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgICBjYXNlIFwiYm9vbGVhblwiOiByZXR1cm4gXCJib29sZWFuXCI7XG4gICAgICAgIGNhc2UgXCJudW1iZXJcIjogcmV0dXJuIFwibnVtYmVyXCI7XG4gICAgICAgIGNhc2UgXCJzdHJpbmdcIjogcmV0dXJuIFwic3RyaW5nXCI7XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KGRlZmF1bHRWYWx1ZSkpXG4gICAgICAgIHJldHVybiBcImFycmF5XCI7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChkZWZhdWx0VmFsdWUpID09PSBcIltvYmplY3QgT2JqZWN0XVwiKVxuICAgICAgICByZXR1cm4gXCJvYmplY3RcIjtcbn1cbmZ1bmN0aW9uIHBhcnNlVmFsdWVUeXBlT2JqZWN0KHR5cGVPYmplY3QpIHtcbiAgICBjb25zdCB0eXBlRnJvbU9iamVjdCA9IHBhcnNlVmFsdWVUeXBlQ29uc3RhbnQodHlwZU9iamVjdC50eXBlKTtcbiAgICBpZiAodHlwZUZyb21PYmplY3QpIHtcbiAgICAgICAgY29uc3QgZGVmYXVsdFZhbHVlVHlwZSA9IHBhcnNlVmFsdWVUeXBlRGVmYXVsdCh0eXBlT2JqZWN0LmRlZmF1bHQpO1xuICAgICAgICBpZiAodHlwZUZyb21PYmplY3QgIT09IGRlZmF1bHRWYWx1ZVR5cGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVHlwZSBcIiR7dHlwZUZyb21PYmplY3R9XCIgbXVzdCBtYXRjaCB0aGUgdHlwZSBvZiB0aGUgZGVmYXVsdCB2YWx1ZS4gR2l2ZW4gZGVmYXVsdCB2YWx1ZTogXCIke3R5cGVPYmplY3QuZGVmYXVsdH1cIiBhcyBcIiR7ZGVmYXVsdFZhbHVlVHlwZX1cImApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0eXBlRnJvbU9iamVjdDtcbiAgICB9XG59XG5mdW5jdGlvbiBwYXJzZVZhbHVlVHlwZURlZmluaXRpb24odHlwZURlZmluaXRpb24pIHtcbiAgICBjb25zdCB0eXBlRnJvbU9iamVjdCA9IHBhcnNlVmFsdWVUeXBlT2JqZWN0KHR5cGVEZWZpbml0aW9uKTtcbiAgICBjb25zdCB0eXBlRnJvbURlZmF1bHRWYWx1ZSA9IHBhcnNlVmFsdWVUeXBlRGVmYXVsdCh0eXBlRGVmaW5pdGlvbik7XG4gICAgY29uc3QgdHlwZUZyb21Db25zdGFudCA9IHBhcnNlVmFsdWVUeXBlQ29uc3RhbnQodHlwZURlZmluaXRpb24pO1xuICAgIGNvbnN0IHR5cGUgPSB0eXBlRnJvbU9iamVjdCB8fCB0eXBlRnJvbURlZmF1bHRWYWx1ZSB8fCB0eXBlRnJvbUNvbnN0YW50O1xuICAgIGlmICh0eXBlKVxuICAgICAgICByZXR1cm4gdHlwZTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gdmFsdWUgdHlwZSBcIiR7dHlwZURlZmluaXRpb259XCJgKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRWYWx1ZUZvckRlZmluaXRpb24odHlwZURlZmluaXRpb24pIHtcbiAgICBjb25zdCBjb25zdGFudCA9IHBhcnNlVmFsdWVUeXBlQ29uc3RhbnQodHlwZURlZmluaXRpb24pO1xuICAgIGlmIChjb25zdGFudClcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZXNCeVR5cGVbY29uc3RhbnRdO1xuICAgIGNvbnN0IGRlZmF1bHRWYWx1ZSA9IHR5cGVEZWZpbml0aW9uLmRlZmF1bHQ7XG4gICAgaWYgKGRlZmF1bHRWYWx1ZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgIHJldHVybiB0eXBlRGVmaW5pdGlvbjtcbn1cbmZ1bmN0aW9uIHZhbHVlRGVzY3JpcHRvckZvclRva2VuQW5kVHlwZURlZmluaXRpb24odG9rZW4sIHR5cGVEZWZpbml0aW9uKSB7XG4gICAgY29uc3Qga2V5ID0gYCR7ZGFzaGVyaXplKHRva2VuKX0tdmFsdWVgO1xuICAgIGNvbnN0IHR5cGUgPSBwYXJzZVZhbHVlVHlwZURlZmluaXRpb24odHlwZURlZmluaXRpb24pO1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGUsXG4gICAgICAgIGtleSxcbiAgICAgICAgbmFtZTogY2FtZWxpemUoa2V5KSxcbiAgICAgICAgZ2V0IGRlZmF1bHRWYWx1ZSgpIHsgcmV0dXJuIGRlZmF1bHRWYWx1ZUZvckRlZmluaXRpb24odHlwZURlZmluaXRpb24pOyB9LFxuICAgICAgICBnZXQgaGFzQ3VzdG9tRGVmYXVsdFZhbHVlKCkgeyByZXR1cm4gcGFyc2VWYWx1ZVR5cGVEZWZhdWx0KHR5cGVEZWZpbml0aW9uKSAhPT0gdW5kZWZpbmVkOyB9LFxuICAgICAgICByZWFkZXI6IHJlYWRlcnNbdHlwZV0sXG4gICAgICAgIHdyaXRlcjogd3JpdGVyc1t0eXBlXSB8fCB3cml0ZXJzLmRlZmF1bHRcbiAgICB9O1xufVxuY29uc3QgZGVmYXVsdFZhbHVlc0J5VHlwZSA9IHtcbiAgICBnZXQgYXJyYXkoKSB7IHJldHVybiBbXTsgfSxcbiAgICBib29sZWFuOiBmYWxzZSxcbiAgICBudW1iZXI6IDAsXG4gICAgZ2V0IG9iamVjdCgpIHsgcmV0dXJuIHt9OyB9LFxuICAgIHN0cmluZzogXCJcIlxufTtcbmNvbnN0IHJlYWRlcnMgPSB7XG4gICAgYXJyYXkodmFsdWUpIHtcbiAgICAgICAgY29uc3QgYXJyYXkgPSBKU09OLnBhcnNlKHZhbHVlKTtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGFycmF5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkV4cGVjdGVkIGFycmF5XCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICB9LFxuICAgIGJvb2xlYW4odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICEodmFsdWUgPT0gXCIwXCIgfHwgdmFsdWUgPT0gXCJmYWxzZVwiKTtcbiAgICB9LFxuICAgIG51bWJlcih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gTnVtYmVyKHZhbHVlKTtcbiAgICB9LFxuICAgIG9iamVjdCh2YWx1ZSkge1xuICAgICAgICBjb25zdCBvYmplY3QgPSBKU09OLnBhcnNlKHZhbHVlKTtcbiAgICAgICAgaWYgKG9iamVjdCA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqZWN0ICE9IFwib2JqZWN0XCIgfHwgQXJyYXkuaXNBcnJheShvYmplY3QpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRXhwZWN0ZWQgb2JqZWN0XCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfSxcbiAgICBzdHJpbmcodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbn07XG5jb25zdCB3cml0ZXJzID0ge1xuICAgIGRlZmF1bHQ6IHdyaXRlU3RyaW5nLFxuICAgIGFycmF5OiB3cml0ZUpTT04sXG4gICAgb2JqZWN0OiB3cml0ZUpTT05cbn07XG5mdW5jdGlvbiB3cml0ZUpTT04odmFsdWUpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xufVxuZnVuY3Rpb24gd3JpdGVTdHJpbmcodmFsdWUpIHtcbiAgICByZXR1cm4gYCR7dmFsdWV9YDtcbn1cblxuY2xhc3MgQ29udHJvbGxlciB7XG4gICAgY29uc3RydWN0b3IoY29udGV4dCkge1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0IHNob3VsZExvYWQoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBnZXQgYXBwbGljYXRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRleHQuYXBwbGljYXRpb247XG4gICAgfVxuICAgIGdldCBzY29wZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dC5zY29wZTtcbiAgICB9XG4gICAgZ2V0IGVsZW1lbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNjb3BlLmVsZW1lbnQ7XG4gICAgfVxuICAgIGdldCBpZGVudGlmaWVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zY29wZS5pZGVudGlmaWVyO1xuICAgIH1cbiAgICBnZXQgdGFyZ2V0cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2NvcGUudGFyZ2V0cztcbiAgICB9XG4gICAgZ2V0IGNsYXNzZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNjb3BlLmNsYXNzZXM7XG4gICAgfVxuICAgIGdldCBkYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zY29wZS5kYXRhO1xuICAgIH1cbiAgICBpbml0aWFsaXplKCkge1xuICAgIH1cbiAgICBjb25uZWN0KCkge1xuICAgIH1cbiAgICBkaXNjb25uZWN0KCkge1xuICAgIH1cbiAgICBkaXNwYXRjaChldmVudE5hbWUsIHsgdGFyZ2V0ID0gdGhpcy5lbGVtZW50LCBkZXRhaWwgPSB7fSwgcHJlZml4ID0gdGhpcy5pZGVudGlmaWVyLCBidWJibGVzID0gdHJ1ZSwgY2FuY2VsYWJsZSA9IHRydWUgfSA9IHt9KSB7XG4gICAgICAgIGNvbnN0IHR5cGUgPSBwcmVmaXggPyBgJHtwcmVmaXh9OiR7ZXZlbnROYW1lfWAgOiBldmVudE5hbWU7XG4gICAgICAgIGNvbnN0IGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KHR5cGUsIHsgZGV0YWlsLCBidWJibGVzLCBjYW5jZWxhYmxlIH0pO1xuICAgICAgICB0YXJnZXQuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgICAgIHJldHVybiBldmVudDtcbiAgICB9XG59XG5Db250cm9sbGVyLmJsZXNzaW5ncyA9IFtDbGFzc1Byb3BlcnRpZXNCbGVzc2luZywgVGFyZ2V0UHJvcGVydGllc0JsZXNzaW5nLCBWYWx1ZVByb3BlcnRpZXNCbGVzc2luZ107XG5Db250cm9sbGVyLnRhcmdldHMgPSBbXTtcbkNvbnRyb2xsZXIudmFsdWVzID0ge307XG5cbmV4cG9ydCB7IEFwcGxpY2F0aW9uLCBBdHRyaWJ1dGVPYnNlcnZlciwgQ29udGV4dCwgQ29udHJvbGxlciwgRWxlbWVudE9ic2VydmVyLCBJbmRleGVkTXVsdGltYXAsIE11bHRpbWFwLCBTdHJpbmdNYXBPYnNlcnZlciwgVG9rZW5MaXN0T2JzZXJ2ZXIsIFZhbHVlTGlzdE9ic2VydmVyLCBhZGQsIGRlZmF1bHRTY2hlbWEsIGRlbCwgZmV0Y2gsIHBydW5lIH07XG4iLCJpbXBvcnQge0NvbnRyb2xsZXJ9IGZyb20gXCJAaG90d2lyZWQvc3RpbXVsdXNcIjtcbmltcG9ydCBTZXR0aW5nc0NoYW5nZWRFdmVudCBmcm9tIFwiLi4vZXZlbnQvU2V0dGluZ3NDaGFuZ2VkRXZlbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgZXh0ZW5kcyBDb250cm9sbGVyIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNvbnRhaW5lclRhcmdldDogSFRNTERpdkVsZW1lbnRcbiAgICBwcml2YXRlIHJlYWRvbmx5IGxpbmtUYXJnZXQ6IEhUTUxBbmNob3JFbGVtZW50XG4gICAgcHJpdmF0ZSByZWFkb25seSBpbWFnZVRhcmdldDogSFRNTEltYWdlRWxlbWVudFxuXG4gICAgc3RhdGljIHRhcmdldHMgPSBbJ2NvbnRhaW5lcicsICdsaW5rJywgJ2ltYWdlJ11cblxuICAgIGNvbm5lY3QoKSB7XG4gICAgICAgIHRoaXMubG9hZCgpXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoU2V0dGluZ3NDaGFuZ2VkRXZlbnQuZXZlbnROYW1lLCAoZXZlbnQ6IFNldHRpbmdzQ2hhbmdlZEV2ZW50KSA9PiB0aGlzLnByZXZpZXcoZXZlbnQpKTtcbiAgICB9XG5cbiAgICBsb2FkKCkge1xuICAgICAgICBmZXRjaCgnLi9wcmV2aWV3Lmh0bWwnKVxuICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UudGV4dCgpKVxuICAgICAgICAgICAgLnRoZW4oaHRtbCA9PiB0aGlzLmVsZW1lbnQuaW5uZXJIVE1MID0gaHRtbClcbiAgICB9XG5cbiAgICBwcmV2aWV3KGV2ZW50OiBTZXR0aW5nc0NoYW5nZWRFdmVudCkge1xuICAgICAgICB0aGlzLmNvbnRhaW5lclRhcmdldC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBldmVudC5jb2xvcjtcbiAgICAgICAgdGhpcy5saW5rVGFyZ2V0LmlubmVySFRNTCA9IGV2ZW50LnRleHQ7XG4gICAgICAgIHRoaXMubGlua1RhcmdldC5ocmVmID0gZXZlbnQudXJsO1xuICAgICAgICBpZiAoZXZlbnQuZmlsZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5pbWFnZVRhcmdldC5zcmMgPSBldmVudC5maWxlO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHtDb250cm9sbGVyfSBmcm9tIFwiQGhvdHdpcmVkL3N0aW11bHVzXCI7XG5pbXBvcnQgU2V0dGluZ3NDaGFuZ2VkRXZlbnQgZnJvbSBcIi4uL2V2ZW50L1NldHRpbmdzQ2hhbmdlZEV2ZW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIGV4dGVuZHMgQ29udHJvbGxlciB7XG4gICAgcHJpdmF0ZSByZWFkb25seSB0ZXh0VGFyZ2V0OiBIVE1MSW5wdXRFbGVtZW50XG4gICAgcHJpdmF0ZSByZWFkb25seSBjb2xvclRhcmdldDogSFRNTElucHV0RWxlbWVudFxuICAgIHByaXZhdGUgcmVhZG9ubHkgdXJsVGFyZ2V0OiBIVE1MSW5wdXRFbGVtZW50XG4gICAgcHJpdmF0ZSByZWFkb25seSBmaWxlVGFyZ2V0OiBIVE1MSW5wdXRFbGVtZW50XG5cbiAgICBzdGF0aWMgdGFyZ2V0cyA9IFsndGV4dCcsICdjb2xvcicsICdmaWxlJywgJ3VybCddXG5cbiAgICBjb25uZWN0KCkge1xuICAgICAgICB0aGlzLmxvYWQoKVxuICAgIH1cblxuICAgIGxvYWQoKSB7XG4gICAgICAgIGZldGNoKCcuL3NldHRpbmcuaHRtbCcpXG4gICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS50ZXh0KCkpXG4gICAgICAgICAgICAudGhlbihodG1sID0+IHRoaXMuZWxlbWVudC5pbm5lckhUTUwgPSBodG1sKVxuICAgIH1cblxuICAgIGNoYW5nZSgpIHtcbiAgICAgICAgLyogTm8gZmlsZXMgLSBkaXJlY3QgZGlzcGF0Y2ggKi9cbiAgICAgICAgaWYgKHRoaXMuZmlsZVRhcmdldC5maWxlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IFNldHRpbmdzQ2hhbmdlZEV2ZW50KHRoaXMudGV4dFRhcmdldC52YWx1ZSwgdGhpcy5jb2xvclRhcmdldC52YWx1ZSwgdGhpcy51cmxUYXJnZXQudmFsdWUsIG51bGwpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8qIEhhcyBmaWxlcyAtIHJlYWQgY29udGVudCAqL1xuICAgICAgICBjb25zdCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG4gICAgICAgIHJlYWRlci5vbmxvYWQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZpbGVDb250ZW50ID0gZXZlbnQudGFyZ2V0LnJlc3VsdCBhcyBzdHJpbmc7XG4gICAgICAgICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBTZXR0aW5nc0NoYW5nZWRFdmVudCh0aGlzLnRleHRUYXJnZXQudmFsdWUsIHRoaXMuY29sb3JUYXJnZXQudmFsdWUsIHRoaXMudXJsVGFyZ2V0LnZhbHVlLCBmaWxlQ29udGVudCkpXG4gICAgICAgIH07XG4gICAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKHRoaXMuZmlsZVRhcmdldC5maWxlc1swXSk7XG4gICAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2V0dGluZ3NDaGFuZ2VkRXZlbnQgZXh0ZW5kcyBFdmVudCB7XG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBldmVudE5hbWUgPSAnc2V0dGluZy1jaGFuZ2UtZXZlbnQnO1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIHRleHQ6IHN0cmluZywgcHVibGljIGNvbG9yOiBzdHJpbmcsIHB1YmxpYyB1cmw6IHN0cmluZywgcHVibGljIGZpbGU6IHN0cmluZyB8IG51bGwpIHtcbiAgICAgICAgc3VwZXIoU2V0dGluZ3NDaGFuZ2VkRXZlbnQuZXZlbnROYW1lKTtcbiAgICB9XG59XG4iLCJ2YXIgbWFwID0ge1xuXHRcIi4vcHJldmlld19jb250cm9sbGVyLnRzXCI6IDE5Nyxcblx0XCIuL3NldHRpbmdfY29udHJvbGxlci50c1wiOiAxODVcbn07XG5cblxuZnVuY3Rpb24gd2VicGFja0NvbnRleHQocmVxKSB7XG5cdHZhciBpZCA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpO1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhpZCk7XG59XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8obWFwLCByZXEpKSB7XG5cdFx0dmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInXCIpO1xuXHRcdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0XHR0aHJvdyBlO1xuXHR9XG5cdHJldHVybiBtYXBbcmVxXTtcbn1cbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSAzODg7IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJpbXBvcnQge0FwcGxpY2F0aW9ufSBmcm9tIFwiQGhvdHdpcmVkL3N0aW11bHVzXCJcbmltcG9ydCB7ZGVmaW5pdGlvbnNGcm9tQ29udGV4dH0gZnJvbSBcIkBob3R3aXJlZC9zdGltdWx1cy13ZWJwYWNrLWhlbHBlcnNcIjtcblxuY29uc3QgU3RpbXVsdXMgPSBBcHBsaWNhdGlvbi5zdGFydCgpXG5jb25zdCBjb250ZXh0ID0gcmVxdWlyZS5jb250ZXh0KFwiLi9jb250cm9sbGVyc1wiLCB0cnVlLCAvXFwudHMkLylcblN0aW11bHVzLmxvYWQoZGVmaW5pdGlvbnNGcm9tQ29udGV4dChjb250ZXh0KSlcbiIsIi8qXG5TdGltdWx1cyBXZWJwYWNrIEhlbHBlcnMgMS4wLjBcbkNvcHlyaWdodCDCqSAyMDIxIEJhc2VjYW1wLCBMTENcbiAqL1xuZnVuY3Rpb24gZGVmaW5pdGlvbnNGcm9tQ29udGV4dChjb250ZXh0KSB7XG4gICAgcmV0dXJuIGNvbnRleHQua2V5cygpXG4gICAgICAgIC5tYXAoKGtleSkgPT4gZGVmaW5pdGlvbkZvck1vZHVsZVdpdGhDb250ZXh0QW5kS2V5KGNvbnRleHQsIGtleSkpXG4gICAgICAgIC5maWx0ZXIoKHZhbHVlKSA9PiB2YWx1ZSk7XG59XG5mdW5jdGlvbiBkZWZpbml0aW9uRm9yTW9kdWxlV2l0aENvbnRleHRBbmRLZXkoY29udGV4dCwga2V5KSB7XG4gICAgY29uc3QgaWRlbnRpZmllciA9IGlkZW50aWZpZXJGb3JDb250ZXh0S2V5KGtleSk7XG4gICAgaWYgKGlkZW50aWZpZXIpIHtcbiAgICAgICAgcmV0dXJuIGRlZmluaXRpb25Gb3JNb2R1bGVBbmRJZGVudGlmaWVyKGNvbnRleHQoa2V5KSwgaWRlbnRpZmllcik7XG4gICAgfVxufVxuZnVuY3Rpb24gZGVmaW5pdGlvbkZvck1vZHVsZUFuZElkZW50aWZpZXIobW9kdWxlLCBpZGVudGlmaWVyKSB7XG4gICAgY29uc3QgY29udHJvbGxlckNvbnN0cnVjdG9yID0gbW9kdWxlLmRlZmF1bHQ7XG4gICAgaWYgKHR5cGVvZiBjb250cm9sbGVyQ29uc3RydWN0b3IgPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiB7IGlkZW50aWZpZXIsIGNvbnRyb2xsZXJDb25zdHJ1Y3RvciB9O1xuICAgIH1cbn1cbmZ1bmN0aW9uIGlkZW50aWZpZXJGb3JDb250ZXh0S2V5KGtleSkge1xuICAgIGNvbnN0IGxvZ2ljYWxOYW1lID0gKGtleS5tYXRjaCgvXig/OlxcLlxcLyk/KC4rKSg/OltfLV1jb250cm9sbGVyXFwuLis/KSQvKSB8fCBbXSlbMV07XG4gICAgaWYgKGxvZ2ljYWxOYW1lKSB7XG4gICAgICAgIHJldHVybiBsb2dpY2FsTmFtZS5yZXBsYWNlKC9fL2csIFwiLVwiKS5yZXBsYWNlKC9cXC8vZywgXCItLVwiKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IGRlZmluaXRpb25Gb3JNb2R1bGVBbmRJZGVudGlmaWVyLCBkZWZpbml0aW9uRm9yTW9kdWxlV2l0aENvbnRleHRBbmRLZXksIGRlZmluaXRpb25zRnJvbUNvbnRleHQsIGlkZW50aWZpZXJGb3JDb250ZXh0S2V5IH07XG4iXSwibmFtZXMiOlsiRXZlbnRMaXN0ZW5lciIsImNvbnN0cnVjdG9yIiwiZXZlbnRUYXJnZXQiLCJldmVudE5hbWUiLCJldmVudE9wdGlvbnMiLCJ0aGlzIiwidW5vcmRlcmVkQmluZGluZ3MiLCJTZXQiLCJjb25uZWN0IiwiYWRkRXZlbnRMaXN0ZW5lciIsImRpc2Nvbm5lY3QiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYmluZGluZ0Nvbm5lY3RlZCIsImJpbmRpbmciLCJhZGQiLCJiaW5kaW5nRGlzY29ubmVjdGVkIiwiZGVsZXRlIiwiaGFuZGxlRXZlbnQiLCJldmVudCIsImV4dGVuZGVkRXZlbnQiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJPYmplY3QiLCJhc3NpZ24iLCJpbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJjYWxsIiwiZXh0ZW5kRXZlbnQiLCJiaW5kaW5ncyIsIkFycmF5IiwiZnJvbSIsInNvcnQiLCJsZWZ0IiwicmlnaHQiLCJsZWZ0SW5kZXgiLCJpbmRleCIsInJpZ2h0SW5kZXgiLCJEaXNwYXRjaGVyIiwiYXBwbGljYXRpb24iLCJldmVudExpc3RlbmVyTWFwcyIsIk1hcCIsInN0YXJ0ZWQiLCJzdGFydCIsImV2ZW50TGlzdGVuZXJzIiwiZm9yRWFjaCIsImV2ZW50TGlzdGVuZXIiLCJzdG9wIiwidmFsdWVzIiwicmVkdWNlIiwibGlzdGVuZXJzIiwibWFwIiwiY29uY2F0IiwiZmV0Y2hFdmVudExpc3RlbmVyRm9yQmluZGluZyIsImhhbmRsZUVycm9yIiwiZXJyb3IiLCJtZXNzYWdlIiwiZGV0YWlsIiwiZmV0Y2hFdmVudExpc3RlbmVyIiwiZXZlbnRMaXN0ZW5lck1hcCIsImZldGNoRXZlbnRMaXN0ZW5lck1hcEZvckV2ZW50VGFyZ2V0IiwiY2FjaGVLZXkiLCJnZXQiLCJjcmVhdGVFdmVudExpc3RlbmVyIiwic2V0IiwicGFydHMiLCJrZXlzIiwia2V5IiwicHVzaCIsImpvaW4iLCJkZXNjcmlwdG9yUGF0dGVybiIsImNhbWVsaXplIiwidmFsdWUiLCJyZXBsYWNlIiwiXyIsImNoYXIiLCJ0b1VwcGVyQ2FzZSIsImNhcGl0YWxpemUiLCJjaGFyQXQiLCJzbGljZSIsImRhc2hlcml6ZSIsInRvTG93ZXJDYXNlIiwiZGVmYXVsdEV2ZW50TmFtZXMiLCJlIiwiZ2V0QXR0cmlidXRlIiwiRXJyb3IiLCJ0eXBlY2FzdCIsIkpTT04iLCJwYXJzZSIsIm9fTyIsIkJpbmRpbmciLCJjb250ZXh0IiwiYWN0aW9uIiwiaWRlbnRpZmllciIsIndpbGxCZUludm9rZWRCeUV2ZW50IiwiaW52b2tlV2l0aEV2ZW50IiwibWV0aG9kIiwiY29udHJvbGxlciIsIm1ldGhvZE5hbWUiLCJ0YXJnZXQiLCJjdXJyZW50VGFyZ2V0IiwicGFyYW1zIiwiYWN0aW9uRXZlbnQiLCJsb2dEZWJ1Z0FjdGl2aXR5IiwiZWxlbWVudCIsIkVsZW1lbnQiLCJjb250YWlucyIsInNjb3BlIiwiY29udGFpbnNFbGVtZW50IiwiRWxlbWVudE9ic2VydmVyIiwiZGVsZWdhdGUiLCJtdXRhdGlvbk9ic2VydmVySW5pdCIsImF0dHJpYnV0ZXMiLCJjaGlsZExpc3QiLCJzdWJ0cmVlIiwiZWxlbWVudHMiLCJtdXRhdGlvbk9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsIm11dGF0aW9ucyIsInByb2Nlc3NNdXRhdGlvbnMiLCJvYnNlcnZlIiwicmVmcmVzaCIsInBhdXNlIiwiY2FsbGJhY2siLCJ0YWtlUmVjb3JkcyIsIm1hdGNoZXMiLCJtYXRjaEVsZW1lbnRzSW5UcmVlIiwiaGFzIiwicmVtb3ZlRWxlbWVudCIsImFkZEVsZW1lbnQiLCJtdXRhdGlvbiIsInByb2Nlc3NNdXRhdGlvbiIsInR5cGUiLCJwcm9jZXNzQXR0cmlidXRlQ2hhbmdlIiwiYXR0cmlidXRlTmFtZSIsInByb2Nlc3NSZW1vdmVkTm9kZXMiLCJyZW1vdmVkTm9kZXMiLCJwcm9jZXNzQWRkZWROb2RlcyIsImFkZGVkTm9kZXMiLCJub2RlIiwiZWxlbWVudEF0dHJpYnV0ZUNoYW5nZWQiLCJtYXRjaEVsZW1lbnQiLCJub2RlcyIsImVsZW1lbnRGcm9tTm9kZSIsInByb2Nlc3NUcmVlIiwiZWxlbWVudElzQWN0aXZlIiwidHJlZSIsInByb2Nlc3NvciIsIm5vZGVUeXBlIiwiTm9kZSIsIkVMRU1FTlRfTk9ERSIsImlzQ29ubmVjdGVkIiwiZWxlbWVudE1hdGNoZWQiLCJlbGVtZW50VW5tYXRjaGVkIiwiQXR0cmlidXRlT2JzZXJ2ZXIiLCJlbGVtZW50T2JzZXJ2ZXIiLCJzZWxlY3RvciIsImhhc0F0dHJpYnV0ZSIsIm1hdGNoIiwicXVlcnlTZWxlY3RvckFsbCIsImVsZW1lbnRNYXRjaGVkQXR0cmlidXRlIiwiZWxlbWVudFVubWF0Y2hlZEF0dHJpYnV0ZSIsImVsZW1lbnRBdHRyaWJ1dGVWYWx1ZUNoYW5nZWQiLCJTdHJpbmdNYXBPYnNlcnZlciIsInN0cmluZ01hcCIsImF0dHJpYnV0ZU9sZFZhbHVlIiwia25vd25BdHRyaWJ1dGVOYW1lcyIsInJlZnJlc2hBdHRyaWJ1dGUiLCJvbGRWYWx1ZSIsImdldFN0cmluZ01hcEtleUZvckF0dHJpYnV0ZSIsInN0cmluZ01hcEtleUFkZGVkIiwic3RyaW5nTWFwVmFsdWVDaGFuZ2VkIiwic3RyaW5nTWFwS2V5UmVtb3ZlZCIsImN1cnJlbnRBdHRyaWJ1dGVOYW1lcyIsInJlY29yZGVkQXR0cmlidXRlTmFtZXMiLCJhdHRyaWJ1dGUiLCJuYW1lIiwiZmV0Y2giLCJNdWx0aW1hcCIsInZhbHVlc0J5S2V5Iiwic2l6ZSIsInBydW5lIiwiZGVsIiwiaGFzS2V5IiwiaGFzVmFsdWUiLCJzb21lIiwiZ2V0VmFsdWVzRm9yS2V5IiwiZ2V0S2V5c0ZvclZhbHVlIiwiZmlsdGVyIiwiVG9rZW5MaXN0T2JzZXJ2ZXIiLCJhdHRyaWJ1dGVPYnNlcnZlciIsInRva2Vuc0J5RWxlbWVudCIsInRva2Vuc01hdGNoZWQiLCJyZWFkVG9rZW5zRm9yRWxlbWVudCIsInVubWF0Y2hlZFRva2VucyIsIm1hdGNoZWRUb2tlbnMiLCJyZWZyZXNoVG9rZW5zRm9yRWxlbWVudCIsInRva2Vuc1VubWF0Y2hlZCIsInRva2VucyIsInRva2VuIiwidG9rZW5NYXRjaGVkIiwidG9rZW5Vbm1hdGNoZWQiLCJwcmV2aW91c1Rva2VucyIsImN1cnJlbnRUb2tlbnMiLCJmaXJzdERpZmZlcmluZ0luZGV4IiwibGVuZ3RoIiwiTWF0aCIsIm1heCIsInppcCIsImZpbmRJbmRleCIsInByZXZpb3VzVG9rZW4iLCJjdXJyZW50VG9rZW4iLCJjb250ZW50IiwidG9rZW5TdHJpbmciLCJ0cmltIiwic3BsaXQiLCJwYXJzZVRva2VuU3RyaW5nIiwiVmFsdWVMaXN0T2JzZXJ2ZXIiLCJ0b2tlbkxpc3RPYnNlcnZlciIsInBhcnNlUmVzdWx0c0J5VG9rZW4iLCJXZWFrTWFwIiwidmFsdWVzQnlUb2tlbkJ5RWxlbWVudCIsImZldGNoUGFyc2VSZXN1bHRGb3JUb2tlbiIsImZldGNoVmFsdWVzQnlUb2tlbkZvckVsZW1lbnQiLCJlbGVtZW50TWF0Y2hlZFZhbHVlIiwiZWxlbWVudFVubWF0Y2hlZFZhbHVlIiwicGFyc2VSZXN1bHQiLCJwYXJzZVRva2VuIiwidmFsdWVzQnlUb2tlbiIsInBhcnNlVmFsdWVGb3JUb2tlbiIsIkJpbmRpbmdPYnNlcnZlciIsImJpbmRpbmdzQnlBY3Rpb24iLCJ2YWx1ZUxpc3RPYnNlcnZlciIsImFjdGlvbkF0dHJpYnV0ZSIsImRpc2Nvbm5lY3RBbGxBY3Rpb25zIiwic2NoZW1hIiwiY29ubmVjdEFjdGlvbiIsImRpc2Nvbm5lY3RBY3Rpb24iLCJjbGVhciIsImRlc2NyaXB0b3IiLCJ0YWdOYW1lIiwiZ2V0RGVmYXVsdEV2ZW50TmFtZUZvckVsZW1lbnQiLCJzdGF0aWMiLCJkZXNjcmlwdG9yU3RyaW5nIiwiZXZlbnRUYXJnZXROYW1lIiwid2luZG93IiwiZG9jdW1lbnQiLCJvcHRpb25zIiwidGVzdCIsInBhcnNlQWN0aW9uRGVzY3JpcHRvclN0cmluZyIsInRvU3RyaW5nIiwiZXZlbnROYW1lU3VmZml4IiwiZ2V0UGFyYW1zRnJvbUV2ZW50VGFyZ2V0QXR0cmlidXRlcyIsInBhdHRlcm4iLCJSZWdFeHAiLCJmb3JUb2tlbiIsIlZhbHVlT2JzZXJ2ZXIiLCJyZWNlaXZlciIsInN0cmluZ01hcE9ic2VydmVyIiwidmFsdWVEZXNjcmlwdG9yTWFwIiwiaW52b2tlQ2hhbmdlZENhbGxiYWNrc0ZvckRlZmF1bHRWYWx1ZXMiLCJpbnZva2VDaGFuZ2VkQ2FsbGJhY2siLCJ3cml0ZXIiLCJkZWZhdWx0VmFsdWUiLCJ2YWx1ZURlc2NyaXB0b3JOYW1lTWFwIiwidmFsdWVEZXNjcmlwdG9ycyIsInVuZGVmaW5lZCIsImRhdGEiLCJyYXdWYWx1ZSIsInJhd09sZFZhbHVlIiwiY2hhbmdlZE1ldGhvZE5hbWUiLCJjaGFuZ2VkTWV0aG9kIiwicmVhZGVyIiwiZGVzY3JpcHRvcnMiLCJoYXNNZXRob2ROYW1lIiwiVGFyZ2V0T2JzZXJ2ZXIiLCJ0YXJnZXRzQnlOYW1lIiwiZGlzY29ubmVjdEFsbFRhcmdldHMiLCJjb25uZWN0VGFyZ2V0IiwiZGlzY29ubmVjdFRhcmdldCIsIl9hIiwidGFyZ2V0Q29ubmVjdGVkIiwidGFyZ2V0RGlzY29ubmVjdGVkIiwiQ29udGV4dCIsIm1vZHVsZSIsImZ1bmN0aW9uTmFtZSIsImNvbnRyb2xsZXJDb25zdHJ1Y3RvciIsImJpbmRpbmdPYnNlcnZlciIsImRpc3BhdGNoZXIiLCJ2YWx1ZU9ic2VydmVyIiwidGFyZ2V0T2JzZXJ2ZXIiLCJpbml0aWFsaXplIiwicGFyZW50RWxlbWVudCIsImludm9rZUNvbnRyb2xsZXJNZXRob2QiLCJhcmdzIiwicmVhZEluaGVyaXRhYmxlU3RhdGljQXJyYXlWYWx1ZXMiLCJwcm9wZXJ0eU5hbWUiLCJhbmNlc3RvcnMiLCJnZXRBbmNlc3RvcnNGb3JDb25zdHJ1Y3RvciIsImRlZmluaXRpb24iLCJpc0FycmF5IiwiZ2V0T3duU3RhdGljQXJyYXlWYWx1ZXMiLCJnZXRQcm90b3R5cGVPZiIsInJldmVyc2UiLCJnZXRPd25LZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwib2JqZWN0IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImV4dGVuZCIsImV4dGVuZFdpdGhSZWZsZWN0IiwiZXh0ZW5kZWQiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiYXJndW1lbnRzIiwicHJvdG90eXBlIiwiY3JlYXRlIiwic2V0UHJvdG90eXBlT2YiLCJiIiwiYSIsInRlc3RSZWZsZWN0RXh0ZW5zaW9uIiwiTW9kdWxlIiwicHJvcGVydGllcyIsInNoYWRvd0NvbnN0cnVjdG9yIiwic2hhZG93UHJvcGVydGllcyIsInNoYWRvd2luZ0Rlc2NyaXB0b3IiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRTaGFkb3dlZERlc2NyaXB0b3IiLCJnZXRTaGFkb3dQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydGllcyIsInNoYWRvdyIsImJsZXNzZWRQcm9wZXJ0aWVzIiwiYmxlc3NpbmciLCJnZXRCbGVzc2VkUHJvcGVydGllcyIsImJsZXNzRGVmaW5pdGlvbiIsImNvbnRleHRzQnlTY29wZSIsImNvbm5lY3RlZENvbnRleHRzIiwiY29udGV4dHMiLCJjb25uZWN0Q29udGV4dEZvclNjb3BlIiwiZmV0Y2hDb250ZXh0Rm9yU2NvcGUiLCJkaXNjb25uZWN0Q29udGV4dEZvclNjb3BlIiwiQ2xhc3NNYXAiLCJnZXREYXRhS2V5IiwiZ2V0QWxsIiwiZ2V0QXR0cmlidXRlTmFtZSIsImdldEF0dHJpYnV0ZU5hbWVGb3JLZXkiLCJEYXRhTWFwIiwic2V0QXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwiR3VpZGUiLCJsb2dnZXIiLCJ3YXJuZWRLZXlzQnlPYmplY3QiLCJ3YXJuIiwid2FybmVkS2V5cyIsImF0dHJpYnV0ZVZhbHVlQ29udGFpbnNUb2tlbiIsIlRhcmdldFNldCIsInRhcmdldE5hbWUiLCJmaW5kIiwidGFyZ2V0TmFtZXMiLCJmaW5kVGFyZ2V0IiwiZmluZExlZ2FjeVRhcmdldCIsImZpbmRBbGwiLCJ0YXJnZXRzIiwiZmluZEFsbFRhcmdldHMiLCJmaW5kQWxsTGVnYWN5VGFyZ2V0cyIsImdldFNlbGVjdG9yRm9yVGFyZ2V0TmFtZSIsImZpbmRFbGVtZW50IiwiZmluZEFsbEVsZW1lbnRzIiwidGFyZ2V0QXR0cmlidXRlRm9yU2NvcGUiLCJnZXRMZWdhY3lTZWxlY3RvckZvclRhcmdldE5hbWUiLCJkZXByZWNhdGUiLCJ0YXJnZXREZXNjcmlwdG9yIiwidGFyZ2V0QXR0cmlidXRlIiwicmV2aXNlZEF0dHJpYnV0ZU5hbWUiLCJndWlkZSIsIlNjb3BlIiwiY2xhc3NlcyIsImNsb3Nlc3QiLCJjb250cm9sbGVyU2VsZWN0b3IiLCJxdWVyeUVsZW1lbnRzIiwiY29udHJvbGxlckF0dHJpYnV0ZSIsIlNjb3BlT2JzZXJ2ZXIiLCJzY29wZXNCeUlkZW50aWZpZXJCeUVsZW1lbnQiLCJzY29wZVJlZmVyZW5jZUNvdW50cyIsInNjb3Blc0J5SWRlbnRpZmllciIsImZldGNoU2NvcGVzQnlJZGVudGlmaWVyRm9yRWxlbWVudCIsImNyZWF0ZVNjb3BlRm9yRWxlbWVudEFuZElkZW50aWZpZXIiLCJyZWZlcmVuY2VDb3VudCIsInNjb3BlQ29ubmVjdGVkIiwic2NvcGVEaXNjb25uZWN0ZWQiLCJSb3V0ZXIiLCJzY29wZU9ic2VydmVyIiwibW9kdWxlc0J5SWRlbnRpZmllciIsIm1vZHVsZXMiLCJsb2FkRGVmaW5pdGlvbiIsInVubG9hZElkZW50aWZpZXIiLCJjb25uZWN0TW9kdWxlIiwiZGlzY29ubmVjdE1vZHVsZSIsImdldENvbnRleHRGb3JFbGVtZW50QW5kSWRlbnRpZmllciIsImRlZmF1bHRTY2hlbWEiLCJBcHBsaWNhdGlvbiIsImRvY3VtZW50RWxlbWVudCIsImNvbnNvbGUiLCJkZWJ1ZyIsImxvZ0Zvcm1hdHRlZE1lc3NhZ2UiLCJyb3V0ZXIiLCJhc3luYyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVhZHlTdGF0ZSIsInJlZ2lzdGVyIiwic2hvdWxkTG9hZCIsImxvYWQiLCJoZWFkIiwicmVzdCIsInVubG9hZCIsImNvbnRyb2xsZXJzIiwiZ2V0Q29udHJvbGxlckZvckVsZW1lbnRBbmRJZGVudGlmaWVyIiwib25lcnJvciIsImdyb3VwQ29sbGFwc2VkIiwibG9nIiwiZ3JvdXBFbmQiLCJwYXJzZVZhbHVlRGVmaW5pdGlvblBhaXIiLCJ0eXBlRGVmaW5pdGlvbiIsInR5cGVGcm9tT2JqZWN0IiwidHlwZU9iamVjdCIsInBhcnNlVmFsdWVUeXBlQ29uc3RhbnQiLCJkZWZhdWx0VmFsdWVUeXBlIiwicGFyc2VWYWx1ZVR5cGVEZWZhdWx0IiwiZGVmYXVsdCIsInBhcnNlVmFsdWVUeXBlT2JqZWN0IiwidHlwZUZyb21EZWZhdWx0VmFsdWUiLCJ0eXBlRnJvbUNvbnN0YW50IiwicGFyc2VWYWx1ZVR5cGVEZWZpbml0aW9uIiwiY29uc3RhbnQiLCJkZWZhdWx0VmFsdWVzQnlUeXBlIiwiZGVmYXVsdFZhbHVlRm9yRGVmaW5pdGlvbiIsImhhc0N1c3RvbURlZmF1bHRWYWx1ZSIsInJlYWRlcnMiLCJ3cml0ZXJzIiwidmFsdWVEZXNjcmlwdG9yRm9yVG9rZW5BbmRUeXBlRGVmaW5pdGlvbiIsIkJvb2xlYW4iLCJOdW1iZXIiLCJTdHJpbmciLCJhcnJheSIsImJvb2xlYW4iLCJudW1iZXIiLCJzdHJpbmciLCJUeXBlRXJyb3IiLCJ3cml0ZUpTT04iLCJzdHJpbmdpZnkiLCJDb250cm9sbGVyIiwiZGlzcGF0Y2giLCJwcmVmaXgiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsIkN1c3RvbUV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImJsZXNzaW5ncyIsImNsYXNzRGVmaW5pdGlvbiIsInRhcmdldERlZmluaXRpb24iLCJ2YWx1ZURlZmluaXRpb25QYWlycyIsInBhaXJzIiwiZ2V0T3duU3RhdGljT2JqZWN0UGFpcnMiLCJyZWFkSW5oZXJpdGFibGVTdGF0aWNPYmplY3RQYWlycyIsInByb3BlcnR5RGVzY3JpcHRvck1hcCIsInJlc3VsdCIsInZhbHVlRGVmaW5pdGlvblBhaXIiLCJ2YWx1ZURlc2NyaXB0b3IiLCJyZWFkIiwid3JpdGUiLCJwcm9wZXJ0aWVzRm9yVmFsdWVEZWZpbml0aW9uUGFpciIsInByZXZpZXciLCJ0aGVuIiwicmVzcG9uc2UiLCJ0ZXh0IiwiaHRtbCIsImlubmVySFRNTCIsImNvbnRhaW5lclRhcmdldCIsInN0eWxlIiwiYmFja2dyb3VuZENvbG9yIiwiY29sb3IiLCJsaW5rVGFyZ2V0IiwiaHJlZiIsInVybCIsImZpbGUiLCJpbWFnZVRhcmdldCIsInNyYyIsImNoYW5nZSIsImZpbGVUYXJnZXQiLCJmaWxlcyIsInRleHRUYXJnZXQiLCJjb2xvclRhcmdldCIsInVybFRhcmdldCIsIkZpbGVSZWFkZXIiLCJvbmxvYWQiLCJmaWxlQ29udGVudCIsInJlYWRBc0RhdGFVUkwiLCJTZXR0aW5nc0NoYW5nZWRFdmVudCIsIkV2ZW50Iiwic3VwZXIiLCJ3ZWJwYWNrQ29udGV4dCIsInJlcSIsImlkIiwid2VicGFja0NvbnRleHRSZXNvbHZlIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm8iLCJjb2RlIiwiZXhwb3J0cyIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImQiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJvYmoiLCJwcm9wIiwiaGFzT3duUHJvcGVydHkiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJTdGltdWx1cyIsImxvZ2ljYWxOYW1lIiwiaWRlbnRpZmllckZvckNvbnRleHRLZXkiLCJkZWZpbml0aW9uRm9yTW9kdWxlQW5kSWRlbnRpZmllciIsImRlZmluaXRpb25Gb3JNb2R1bGVXaXRoQ29udGV4dEFuZEtleSIsImRlZmluaXRpb25zRnJvbUNvbnRleHQiXSwic291cmNlUm9vdCI6IiJ9